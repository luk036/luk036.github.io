var searchData=
[
  ['take_5fsnapshot',['take_snapshot',['../classFMPartMgr.html#a90206830423277ffe969ae26a3194139',1,'FMPartMgr']]],
  ['taker',['Taker',['../classiter_1_1impl_1_1Taker.html',1,'iter::impl::Taker&lt; FilterFunc, Container &gt;'],['../classiter_1_1impl_1_1Taker.html#a3c76682e2825b55ed467e0ee1c7e143c',1,'iter::impl::Taker::Taker(FilterFunc filter_func, Container &amp;&amp;container)'],['../classiter_1_1impl_1_1Taker.html#ac7e7e86db16e588af21b99cd4c60e1f4',1,'iter::impl::Taker::Taker(Taker &amp;&amp;)=default']]],
  ['takewhile',['takewhile',['../namespaceiter.html#a42d3918f9b65776faa525cc35046e0bc',1,'iter']]],
  ['takewhile_2ehpp',['takewhile.hpp',['../takewhile_8hpp.html',1,'']]],
  ['takewhile_5fexamples_2ecpp',['takewhile_examples.cpp',['../takewhile__examples_8cpp.html',1,'']]],
  ['takewhilefn',['TakeWhileFn',['../classiter_1_1impl_1_1Taker.html#a38368712f5449b592395417567e466cd',1,'iter::impl::Taker::TakeWhileFn()'],['../namespaceiter_1_1impl.html#a6642f81e67e8075f9e3ecf9a37f38c55',1,'iter::impl::TakeWhileFn()']]],
  ['test_5faccumulate_2ecpp',['test_accumulate.cpp',['../test__accumulate_8cpp.html',1,'']]],
  ['test_5fbpqueue_2ecpp',['test_bpqueue.cpp',['../test__bpqueue_8cpp.html',1,'']]],
  ['test_5fcase',['TEST_CASE',['../test__accumulate_8cpp.html#af0902c0aa0e666ccbf9418699b49ba03',1,'TEST_CASE(&quot;Simple sum&quot;, &quot;[accumulate]&quot;):&#160;test_accumulate.cpp'],['../test__accumulate_8cpp.html#a7a7acecc879a86d3e06cc759504360c0',1,'TEST_CASE(&quot;accumulate: With subtraction lambda&quot;, &quot;[accumulate]&quot;):&#160;test_accumulate.cpp'],['../test__accumulate_8cpp.html#abcc5c8a65e1618eb9099be4701184369',1,'TEST_CASE(&quot;accumulate: handles pointer to member function&quot;, &quot;[accumulate]&quot;):&#160;test_accumulate.cpp'],['../test__accumulate_8cpp.html#a2de27fb5705b7eea3cebf99cc5233308',1,'TEST_CASE(&quot;accumulate: const iterators&quot;, &quot;[accumulate][const]&quot;):&#160;test_accumulate.cpp'],['../test__accumulate_8cpp.html#a2ba7c346ee6f2a30cb063ed6ff01b444',1,'TEST_CASE(&quot;accumulate: const iterators can be compared&quot;, &quot;[accumulate][const]&quot;):&#160;test_accumulate.cpp'],['../test__accumulate_8cpp.html#a9848f1c109e7067c07a48ecd4e9f456d',1,'TEST_CASE(&quot;accumulate: intermidate type need not be default constructible&quot;, &quot;[accumulate]&quot;):&#160;test_accumulate.cpp'],['../test__accumulate_8cpp.html#a83201a1eca51b6a27bbc72d2f99d9151',1,'TEST_CASE(&quot;accumulate: binds reference when it should&quot;, &quot;[accumulate]&quot;):&#160;test_accumulate.cpp'],['../test__accumulate_8cpp.html#a03f7a597c0f2b488e9bc8a784ccd9d59',1,'TEST_CASE(&quot;accumulate: moves rvalues when it should&quot;, &quot;[accumulate]&quot;):&#160;test_accumulate.cpp'],['../test__accumulate_8cpp.html#a0ace170f32795bcabb3be11abb846ec6',1,'TEST_CASE(&quot;accumulate: operator==&quot;, &quot;[accumulate]&quot;):&#160;test_accumulate.cpp'],['../test__accumulate_8cpp.html#a7b9001de6bbf0c34f13c91c9a6f40bb2',1,'TEST_CASE(&quot;accumulate: postfix ++&quot;, &quot;[accumulate]&quot;):&#160;test_accumulate.cpp'],['../test__accumulate_8cpp.html#a09dbe9bff1881f40e646af66edc3627b',1,'TEST_CASE(&quot;accumulate: operator-&gt;&quot;, &quot;[accumulate]&quot;):&#160;test_accumulate.cpp'],['../test__accumulate_8cpp.html#a5b3533a676e1629552b762e822804ecd',1,'TEST_CASE(&quot;accumulate: iterator meets requirements&quot;, &quot;[accumulate]&quot;):&#160;test_accumulate.cpp'],['../test__accumulate_8cpp.html#a966ea3cfbb9a41e205935e8f949e6aa6',1,'TEST_CASE(&quot;accumulate: Works with different begin and end types&quot;, &quot;[accumulate]&quot;):&#160;test_accumulate.cpp'],['../test__accumulate_8cpp.html#a7ce5c90b14312acca76b1da4967141da',1,'TEST_CASE(&quot;accumulate: has correct ctor and assign ops&quot;, &quot;[accumulate]&quot;):&#160;test_accumulate.cpp'],['../test__chain_8cpp.html#acb7dd712365e326946de0e5b8c7b9e0d',1,'TEST_CASE(&quot;chain: three strings&quot;, &quot;[chain]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#ade80a70be9b080d167ae7a9aa84071d1',1,'TEST_CASE(&quot;chain: const iteration&quot;, &quot;[chain][const]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a078b6c7d421ebe1d625cb0cb27fa029c',1,'TEST_CASE(&quot;chain: with different container types&quot;, &quot;[chain]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a06f0832c39661b223d9931298a010cbb',1,'TEST_CASE(&quot;chain: where one container has different begin and end types&quot;, &quot;[chain]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a1bf4e6b15c8d2d85719bb89c40bacaca',1,'TEST_CASE(&quot;chain: handles empty containers&quot;, &quot;[chain]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a06ea6752e8d801dc68c2e4f11da4381c',1,'TEST_CASE(&quot;chain: with only empty containers&quot;, &quot;[chain]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a6fd0ee449a1afae6e5182df3340135e8',1,'TEST_CASE(&quot;chain: doesn&apos;t move or copy elements of iterable&quot;, &quot;[chain]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a042918e19d32bde7917653fe1a4344cc',1,'TEST_CASE(&quot;chain: binds reference to lvalue and moves rvalue&quot;, &quot;[chain]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#ab1495e507121facf5e43d22fbb47ff03',1,'TEST_CASE(&quot;chain: operator==&quot;, &quot;[chain]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a89a68d5d686003ec338544b60bdb2a3d',1,'TEST_CASE(&quot;chain: postfix ++&quot;, &quot;[chain]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#ac6c7dbfa976be6e33d4af9f82ff98cb8',1,'TEST_CASE(&quot;chain: iterator meets requirements&quot;, &quot;[chain]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a5ed8d35e453bea68259483a170405b0f',1,'TEST_CASE(&quot;chain: has correct ctor and assign ops&quot;, &quot;[chain]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#aeca690de5b0b03c07cfecf35b68f96d0',1,'TEST_CASE(&quot;chain.from_iterable: basic test&quot;, &quot;[chain.from_iterable]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a00e8d2c329a593a2886963374ad354fd',1,'TEST_CASE(&quot;chain.from_iterable: const iteration&quot;, &quot;[chain.from_iterable][const]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a2ff7519965e24b828d2b0b624556e4bd',1,'TEST_CASE(&quot;chain.from_iterable: const iterators can be compared to non-const &quot; &quot;iterators&quot;, &quot;[chain.from_iterable][const]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a709d150659cd95385d07017081109898',1,'TEST_CASE(&quot;chain.fromm_iterable: Works with different begin and end types&quot;, &quot;[chain.from_iterable]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a6fee935bfc6e45a6df9c3bc4cabd0569',1,'TEST_CASE(&quot;chain.from_iterable: Works with empty subiterable&quot;, &quot;[chain.from_iterable]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a2fe6c3f36a946ed3421a03c4594fdf21',1,'TEST_CASE(&quot;chain.from_iterable: iterators cant be copy constructed &quot; &quot;and assigned&quot;, &quot;[chain.from_iterable]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a671d5d439fa7fb330c58c448cc16f680',1,'TEST_CASE(&quot;chain.from_iterable: postfix ++&quot;, &quot;[chain.from_iterable]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#aa18c0724240f5919b5608ce22dacd3d7',1,'TEST_CASE(&quot;chain.from_iterable: operator-&gt;&quot;, &quot;[chain.from_iterable]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a08886e286a2d91d9ec78215ebe9af621',1,'TEST_CASE(&quot;chain.from_iterable: moves rvalues and binds ref to lvalues&quot;, &quot;[chain.from_iterable]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#a7430733e744f79be349f9d6e6407e759',1,'TEST_CASE(&quot;chain.from_iterable: empty&quot;, &quot;[chain.from_iterable]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#ab7da27b2af2681982411613f54941fb7',1,'TEST_CASE(&quot;chain.from_iterable: iterator meets requirements&quot;, &quot;[chain.from_iterable]&quot;):&#160;test_chain.cpp'],['../test__chain_8cpp.html#abe0996249931d8ddda4f9a2ead38959b',1,'TEST_CASE(&quot;chain.from_iterable: has correct ctor and assign ops&quot;, &quot;[chain.from_iterable]&quot;):&#160;test_chain.cpp'],['../test__chunked_8cpp.html#a370eecdc8fe01ced4f9bea06a98b6da2',1,'TEST_CASE(&quot;chunked: basic test&quot;, &quot;[chunked]&quot;):&#160;test_chunked.cpp'],['../test__chunked_8cpp.html#aa149cbf9a34feb9c9e2716ce39174ac3',1,'TEST_CASE(&quot;chunked: const chunked&quot;, &quot;[chunked][const]&quot;):&#160;test_chunked.cpp'],['../test__chunked_8cpp.html#a711e8d5cfc4ce608c18697e50370836e',1,'TEST_CASE(&quot;chunked: const iterators can be compared to non-const iterators&quot;, &quot;[chunked][const]&quot;):&#160;test_chunked.cpp'],['../test__chunked_8cpp.html#a978e07e50b2f840b1cf5261bc39543b9',1,'TEST_CASE(&quot;chunked: len(iterable) % groupsize != 0&quot;, &quot;[chunked]&quot;):&#160;test_chunked.cpp'],['../test__chunked_8cpp.html#a0562751f154f220d7608b9dd225cc466',1,'TEST_CASE(&quot;chunked: iterators can be compared&quot;, &quot;[chunked]&quot;):&#160;test_chunked.cpp'],['../test__chunked_8cpp.html#a733fb7badadab795f269738fc728a83f',1,'TEST_CASE(&quot;chunked: size 0 is empty&quot;, &quot;[chunked]&quot;):&#160;test_chunked.cpp'],['../test__chunked_8cpp.html#af865338834f3b78f1fab90ebc0b2e2fd',1,'TEST_CASE(&quot;chunked: Works with different begin and end types&quot;, &quot;[chunked]&quot;):&#160;test_chunked.cpp'],['../test__chunked_8cpp.html#ac6787894924560b4bcad69216160f1b8',1,'TEST_CASE(&quot;chunked: empty iterable gives empty chunked&quot;, &quot;[chunked]&quot;):&#160;test_chunked.cpp'],['../test__chunked_8cpp.html#ae2a5f349a537588dfe12c9072afae52b',1,'TEST_CASE(&quot;chunked: iterator meets requirements&quot;, &quot;[chunked]&quot;):&#160;test_chunked.cpp'],['../test__chunked_8cpp.html#a67d6f1502c41e4db667f838b34c5cc98',1,'TEST_CASE(&quot;chunked: has correct ctor and assign ops&quot;, &quot;[chunked]&quot;):&#160;test_chunked.cpp'],['../test__combinations_8cpp.html#a17961999ceea2477003003cd4f091c0b',1,'TEST_CASE(&quot;combinations: Simple combination of 4&quot;, &quot;[combinations]&quot;):&#160;test_combinations.cpp'],['../test__combinations_8cpp.html#acef529a2c6e0460e38d10d6b19d1e612',1,'TEST_CASE(&quot;combinations: const iteration&quot;, &quot;[combinations][const]&quot;):&#160;test_combinations.cpp'],['../test__combinations_8cpp.html#ad7ccdf589d59ece0107d6689c99cb218',1,'TEST_CASE(&quot;combinations: const iterators can be compared to non-const iterators&quot;, &quot;[combinations][const]&quot;):&#160;test_combinations.cpp'],['../test__combinations_8cpp.html#a1467ae7fa53b191a13b226b20df9f438',1,'TEST_CASE(&quot;combinations: Works with different begin and end types&quot;, &quot;[combinations]&quot;):&#160;test_combinations.cpp'],['../test__combinations_8cpp.html#a6010fb74550cd4c6b5cb62f27e0a9233',1,'TEST_CASE(&quot;combinations: iterators can be compared&quot;, &quot;[combinations]&quot;):&#160;test_combinations.cpp'],['../test__combinations_8cpp.html#a1ee08feb27d372c3a61707f47fa2cb97',1,'TEST_CASE(&quot;combinations: operator-&gt;&quot;, &quot;[combinations]&quot;):&#160;test_combinations.cpp'],['../test__combinations_8cpp.html#a8eb6af505bbc7d60a1103655d7f43340',1,'TEST_CASE(&quot;combinations: size too large gives no results&quot;, &quot;[combinations]&quot;):&#160;test_combinations.cpp'],['../test__combinations_8cpp.html#a34a3be461e712cced7e04279ee0811f3',1,'TEST_CASE(&quot;combinations: size 0 gives nothing&quot;, &quot;[combinations]&quot;):&#160;test_combinations.cpp'],['../test__combinations_8cpp.html#a5b334b0748b8f4efd5bc7423fda21c58',1,'TEST_CASE(&quot;combinations: iterable without operator*() const&quot;, &quot;[combinations]&quot;):&#160;test_combinations.cpp'],['../test__combinations_8cpp.html#a93501ca07f51dd7d1e3e9cbd31035819',1,'TEST_CASE(&quot;combinations: binds to lvalues, moves rvalues&quot;, &quot;[combinations]&quot;):&#160;test_combinations.cpp'],['../test__combinations_8cpp.html#ac515b58eda03042a64022f8590a2ef5e',1,'TEST_CASE(&quot;combinations: doesn&apos;t move or copy elements of iterable&quot;, &quot;[combinations]&quot;):&#160;test_combinations.cpp'],['../test__combinations_8cpp.html#a1601732266a61cf1ca31c121ec780d3c',1,'TEST_CASE(&quot;combinations: iterator meets requirements&quot;, &quot;[combinations]&quot;):&#160;test_combinations.cpp'],['../test__combinations_8cpp.html#abf3a13a5fea1e5f888003b56c1138f71',1,'TEST_CASE(&quot;combinations: has correct ctor and assign ops&quot;, &quot;[combinations]&quot;):&#160;test_combinations.cpp'],['../test__combinations__with__replacement_8cpp.html#afdec8dd57a485b1d95c4f7b2a2f56537',1,'TEST_CASE(&quot;combinations_with_replacement: Simple combination&quot;, &quot;[combinations_with_replacement]&quot;):&#160;test_combinations_with_replacement.cpp'],['../test__combinations__with__replacement_8cpp.html#aa5347f7d7b9c8f7231759b0a0da0109a',1,'TEST_CASE(&quot;combinations_with_replacement: const iteration&quot;, &quot;[combinations_with_replacement]&quot;):&#160;test_combinations_with_replacement.cpp'],['../test__combinations__with__replacement_8cpp.html#a986e14dc4483940898aa6135ff113918',1,'TEST_CASE(&quot;combinations_with_replacement: const iterators can be compared to &quot; &quot;non-const iterators&quot;, &quot;[combinations_with_replacement][const]&quot;):&#160;test_combinations_with_replacement.cpp'],['../test__combinations__with__replacement_8cpp.html#a50d5727b65a6cc639ae2ce7571849e1a',1,'TEST_CASE(&quot;combinations_with_replacement: Works with different begin and end types&quot;, &quot;[combinations_with_replacement]&quot;):&#160;test_combinations_with_replacement.cpp'],['../test__combinations__with__replacement_8cpp.html#aea171c38517803ae2f19055b2617c32e',1,'TEST_CASE(&quot;combinations_with_replacement: iterators can be compared&quot;, &quot;[combinations_with_replacement]&quot;):&#160;test_combinations_with_replacement.cpp'],['../test__combinations__with__replacement_8cpp.html#ad7f865c68dfb1242a7a3887f5410b307',1,'TEST_CASE(&quot;combinations_with_replacement: big size is no problem&quot;, &quot;[combinations_with_replacement]&quot;):&#160;test_combinations_with_replacement.cpp'],['../test__combinations__with__replacement_8cpp.html#a792fb0dca752405076cf1c318751c832',1,'TEST_CASE(&quot;combinations_with_replacement: 0 size is empty&quot;, &quot;[combinations_with_replacement]&quot;):&#160;test_combinations_with_replacement.cpp'],['../test__combinations__with__replacement_8cpp.html#a5a199e380269145da2b414273c3ba645',1,'TEST_CASE(&quot;combinations_with_replacement: operator-&gt;&quot;, &quot;[combinations_with_replacement]&quot;):&#160;test_combinations_with_replacement.cpp'],['../test__combinations__with__replacement_8cpp.html#a5d581acbb5b388a61194f6200a277987',1,'TEST_CASE(&quot;combinations_with_replacement: binds to lvalues, moves rvalues&quot;, &quot;[combinations_with_replacement]&quot;):&#160;test_combinations_with_replacement.cpp'],['../test__combinations__with__replacement_8cpp.html#a673e31f58714f7d73944545662ecff55',1,'TEST_CASE(&quot;combinations_with_replacement: &quot; &quot;doesn&apos;t move or copy elements of iterable&quot;, &quot;[combinations_with_replacement]&quot;):&#160;test_combinations_with_replacement.cpp'],['../test__combinations__with__replacement_8cpp.html#a744179f966377008be093afa9f7d20b2',1,'TEST_CASE(&quot;combinations_with_replacement: iterator meets requirements&quot;, &quot;[combinations_with_replacement]&quot;):&#160;test_combinations_with_replacement.cpp'],['../test__combinations__with__replacement_8cpp.html#a9e967dafa6b41d0390f07ae3c325567a',1,'TEST_CASE(&quot;combinations_with_replacement: has correct ctor and assign ops&quot;, &quot;[combinations_with_replacement]&quot;):&#160;test_combinations_with_replacement.cpp'],['../test__compress_8cpp.html#a2a5444873696f6c0dd7e8863f54b9fad',1,'TEST_CASE(&quot;compress: alternating&quot;, &quot;[compress]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#a280b2c65e2d890e25ca7f1b6a76d84b4',1,'TEST_CASE(&quot;compress: const iteration &quot;, &quot;[compress][const]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#a81098bdf23061cee6ba77e07114d18e2',1,'TEST_CASE(&quot;compress: const iterators can be compared to non-const iterators&quot;, &quot;[compress][const]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#a5673f71827e3d0554efc3d7dbaeff1ff',1,'TEST_CASE(&quot;compress: consecutive falses&quot;, &quot;[compress]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#ad8debc679ada6bfcb30e4425655beaa9',1,'TEST_CASE(&quot;compress: consecutive trues&quot;, &quot;[compress]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#a42b714906c72afbb5b21a3e41bda32fd',1,'TEST_CASE(&quot;compress: all true&quot;, &quot;[compress]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#a385cf62e1275d4fae1a7caa92a30fa5a',1,'TEST_CASE(&quot;compress: all false&quot;, &quot;[compress]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#a17f71e7d4fbefa6cad52ba95c49938a9',1,'TEST_CASE(&quot;compress: operator-&gt;&quot;, &quot;[compress&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#ae0c28d3fd16217fd28723b930adb9337',1,'TEST_CASE(&quot;compress: binds to lvalues, moves rvalues&quot;, &quot;[compress]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#af7f82af9028ba8f66b0e2a2b8d6b561f',1,'TEST_CASE(&quot;compress: workds with truthy and falsey values&quot;, &quot;[compress]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#a4fd37457a6a7648bc2755c094f158ea9',1,'TEST_CASE(&quot;compress: terminates on shorter selectors&quot;, &quot;[compress]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#ae30e8ce8b83ab00da6bcf1598190db43',1,'TEST_CASE(&quot;compress: terminates on shorter data&quot;, &quot;[compress]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#ac7a054a521b7ce9f36176e638d50e77d',1,'TEST_CASE(&quot;compress: nothing on empty selectors&quot;, &quot;[compress]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#a2406dd1c403acf6ef4e6e56b47fac046',1,'TEST_CASE(&quot;compress: nothing on empty data&quot;, &quot;[compress]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#a2f8c0b46a45d330d389979830c60cb8d',1,'TEST_CASE(&quot;compress: iterator meets requirements&quot;, &quot;[compress]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#a73d44c9cba79c6c752985ed9665c0687',1,'TEST_CASE(&quot;compress: Works with different begin and end types&quot;, &quot;[compress]&quot;):&#160;test_compress.cpp'],['../test__compress_8cpp.html#a7b8d014bfdaa54bd9b01dde369283784',1,'TEST_CASE(&quot;compress: has correct ctor and assign ops&quot;, &quot;[compress]&quot;):&#160;test_compress.cpp'],['../test__count_8cpp.html#a5c2aa4884ebd78233aaee59c69410876',1,'TEST_CASE(&quot;count: watch for 10 elements&quot;, &quot;[count]&quot;):&#160;test_count.cpp'],['../test__count_8cpp.html#a448c6421f95d65a887cdbdc6ccbd7cf7',1,'TEST_CASE(&quot;count: const watch for 10 elements&quot;, &quot;[count][const]&quot;):&#160;test_count.cpp'],['../test__count_8cpp.html#a65ffbaea237957a642e14f337d3a4be2',1,'TEST_CASE(&quot;count: start at 10&quot;, &quot;[count]&quot;):&#160;test_count.cpp'],['../test__count_8cpp.html#ae943ab53990262c4669078aa75284c15',1,'TEST_CASE(&quot;count: with step&quot;, &quot;[count]&quot;):&#160;test_count.cpp'],['../test__count_8cpp.html#af1e3acc451fb76778c607fa6fce8bc7a',1,'TEST_CASE(&quot;count: with step &gt; 1&quot;, &quot;[count]&quot;):&#160;test_count.cpp'],['../test__count_8cpp.html#a0913a84787ce92a903644888bffd2139',1,'TEST_CASE(&quot;count: can bo constexpr&quot;, &quot;[count]&quot;):&#160;test_count.cpp'],['../test__count_8cpp.html#afd1256940858d46138f088a90c70ece5',1,'TEST_CASE(&quot;count: iterator meets requirements&quot;, &quot;[count]&quot;):&#160;test_count.cpp'],['../test__cycle_8cpp.html#a7ec39f192dd8fda834ec902612b72a60',1,'TEST_CASE(&quot;cycle: iterate twice&quot;, &quot;[cycle]&quot;):&#160;test_cycle.cpp'],['../test__cycle_8cpp.html#a61dec40fa6023d8b8b986cce09a3644b',1,'TEST_CASE(&quot;cycle: const iteration, iterate twice&quot;, &quot;[cycle][const]&quot;):&#160;test_cycle.cpp'],['../test__cycle_8cpp.html#a9777be032d559b999f101c27603a83eb',1,'TEST_CASE(&quot;cycle: const iterators can be compared to non-const iterators&quot;, &quot;[cycle][const]&quot;):&#160;test_cycle.cpp'],['../test__cycle_8cpp.html#af32e7d57f04600e370493de898168cf7',1,'TEST_CASE(&quot;cycle: Works with different begin and end types&quot;, &quot;[cycle]&quot;):&#160;test_cycle.cpp'],['../test__cycle_8cpp.html#a2962760349ef9d4cdbb0d3efbc4ecc13',1,'TEST_CASE(&quot;cycle: with pipe&quot;, &quot;[cycle]&quot;):&#160;test_cycle.cpp'],['../test__cycle_8cpp.html#a4e19b63869819c8891f64a2c6f7dd509',1,'TEST_CASE(&quot;cycle: empty cycle terminates&quot;, &quot;[cycle]&quot;):&#160;test_cycle.cpp'],['../test__cycle_8cpp.html#a88daefc75b53108b90fc2501094acad1',1,'TEST_CASE(&quot;cycle: binds to lvalues, moves rvalues&quot;, &quot;[cycle]&quot;):&#160;test_cycle.cpp'],['../test__cycle_8cpp.html#a267191158cd539ec79be56d3948c238b',1,'TEST_CASE(&quot;cycle: doesn&apos;t move or copy elements of iterable&quot;, &quot;[cycle]&quot;):&#160;test_cycle.cpp'],['../test__cycle_8cpp.html#a18d3036e0462ec9b1e12a3d19646795f',1,'TEST_CASE(&quot;cycle: iterator meets requirements&quot;, &quot;[cycle]&quot;):&#160;test_cycle.cpp'],['../test__cycle_8cpp.html#a6732a7e6ed53a08c7a5eab6bd9055f83',1,'TEST_CASE(&quot;cycle: arrow works&quot;, &quot;[cycle]&quot;):&#160;test_cycle.cpp'],['../test__cycle_8cpp.html#a30940a19db59369f5ac1689c394e0264',1,'TEST_CASE(&quot;cycle: has correct ctor and assign ops&quot;, &quot;[cycle]&quot;):&#160;test_cycle.cpp'],['../test__dropwhile_8cpp.html#ad6d0160add455535a4a8eabeaea617e4',1,'TEST_CASE(&quot;dropwhile: skips initial elements&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#a68b8027b9f7f62c1ba99ec2a4947ff1b',1,'TEST_CASE(&quot;dropwhile: handles pointer to member&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#ab91ca889a5de6606cdb840a5066d4847',1,'TEST_CASE(&quot;dropwhile: drop zeros from front&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#ad77ba200a8bed5b2e22e2faea66f1a84',1,'TEST_CASE(&quot;dropwhile: const iteration&quot;, &quot;[dropwhile][const]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#a2c714966d71a8ae88eb85e2ad0a5c939',1,'TEST_CASE(&quot;dropwhile: const iterators can be compared to non-const iterators&quot;, &quot;[dropwhile][const]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#ae963cf951e3fb31bdf7646b714711dff',1,'TEST_CASE(&quot;dropwhile: Works with different begin and end types&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#a95caeca534e53cb2b688aa678ab64db1',1,'TEST_CASE(&quot;dropwhile: doesn&apos;t skip anything if it shouldn&apos;t&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#a36c1fcf81a2f25e25024937130d853db',1,'TEST_CASE(&quot;dropwhile: skips all elements when all are true under predicate&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#a7ac48a5db28afbf276c24d2d1a7c5391',1,'TEST_CASE(&quot;dropwhile: identity&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#ab3308bf52ec90b062bce9d6f81b7859c',1,'TEST_CASE(&quot;dropwhile: empty case is empty&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#a3dd449b360d76d066b982fe7fbeb59f2',1,'TEST_CASE(&quot;dropwhile: only drops from beginning&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#a022f695d62f0640dc84a33e5b1cf95b6',1,'TEST_CASE(&quot;dropwhile: operator-&gt;&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#a7d0c9c1fc4ee9c5e6122cf02b48ae7b2',1,'TEST_CASE(&quot;dropwhile: works with function pointer&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#a22c8322b3beeb7e3f8ff7073a0d97bd1',1,'TEST_CASE(&quot;dropwhile: binds to lvalues, moves rvalues&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#a33055152147df9bb96206a94432582c4',1,'TEST_CASE(&quot;dropwhile: doesn&apos;t move or copy elements of iterable&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#a44a3fbb01830eed661583732140fe806',1,'TEST_CASE(&quot;dropwhile: iterator meets requirements&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__dropwhile_8cpp.html#afabb5e91f6ec2aca77423983eaf3f2aa',1,'TEST_CASE(&quot;dropwhile: has correct ctor and assign ops&quot;, &quot;[dropwhile]&quot;):&#160;test_dropwhile.cpp'],['../test__enumerate_8cpp.html#a8c3df2226a6c1c7b3db6623d84538ac1',1,'TEST_CASE(&quot;Basic Functioning enumerate&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#a145cbd8f0af489ca2f9c1c37ee873f49',1,'TEST_CASE(&quot;const enumerate&quot;, &quot;[enumerate][const]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#a5751613b10b6e3de0eb1308dff141091',1,'TEST_CASE(&quot;enumerate: can modify underlying sequence&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#aa49795759ac0c704176186c28268cb96',1,'TEST_CASE(&quot;enumerate: const iterators can be compared&quot;, &quot;[enumerate][const]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#a642fda7705fa795a3049a6a837cdca41',1,'TEST_CASE(&quot;enumerate: has .index, .element, .first, and .second&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#a8ceebfd38f1d48efbc5358434e1c5135',1,'TEST_CASE(&quot;Empty enumerate&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#aa0c1c431e6ebf7d26f91cd40418af3cc',1,'TEST_CASE(&quot;Postfix ++ enumerate&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#ae1ddf8046862bfe906be8c533cd518e3',1,'TEST_CASE(&quot;enumerate: structured bindings&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#aab9c9450025ca616b86db9c286a342d9',1,'TEST_CASE(&quot;enumerate: with starting value&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#a0d1785c4d3302645bbd901aa0a407590',1,'TEST_CASE(&quot;Modifications through enumerate affect container&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#a614aff079997f91c789ea165f8193ea2',1,'TEST_CASE(&quot;enumerate with static array works&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#a7506f7ade8a2a8b65408315c54c40536',1,'TEST_CASE(&quot;binds reference when it should&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#abd62d7ad83183f2b5ec6fb5da5c0ef42',1,'TEST_CASE(&quot;moves rvalues into enumerable object&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#a402355982f9fb590e755d8d348b076fc',1,'TEST_CASE(&quot;enumerate: operator-&gt;&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#ad324a667ea7a48af40f849ee42e49ed8',1,'TEST_CASE(&quot;enumerate: index and element&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#af79d52396b673ade84538c383abe22b8',1,'TEST_CASE(&quot;enumerate: index and element through arrow&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#a5eac2ef912395568d41fb12acbb9e5c8',1,'TEST_CASE(&quot;Works with const iterable&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#a75903aa3a727872053fff87e2b01a92a',1,'TEST_CASE(&quot;Doesn&apos;t move or copy elements of iterable&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#a2d7b84bb6ace7edfab86170d6a0cfd9d',1,'TEST_CASE(&quot;enumerate: iterator meets requirements&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#ab875d606dc5abf878b76a9050327cc1b',1,'TEST_CASE(&quot;enumerate: works with pipe&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#a10ca39c8fd07e5d1e4a9f7c98e080fc3',1,'TEST_CASE(&quot;enumerate: works index and pipe&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#adc36b1e4936b81b8926faf33983665b5',1,'TEST_CASE(&quot;enumerate: Works with different begin and end types&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__enumerate_8cpp.html#a39e9bbf2809c3e6f20c12d051cd2279c',1,'TEST_CASE(&quot;enumerate: has correct ctor and assign ops&quot;, &quot;[enumerate]&quot;):&#160;test_enumerate.cpp'],['../test__filter_8cpp.html#a1e9a664853398b377d854088619f2615',1,'TEST_CASE(&quot;filter: handles different callable types&quot;, &quot;[filter]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#a2fbb97fd1d742a5ce822bf207e5a347b',1,'TEST_CASE(&quot;filter: handles pointer to member&quot;, &quot;[filter]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#a60653ce64af3caf9cbc7e027ecb92f23',1,'TEST_CASE(&quot;filter: const iteration&quot;, &quot;[filter][const]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#ab9286615e300107c03529fc894e584a6',1,'TEST_CASE(&quot;filter: const iterator can be compared to non-const iterator&quot;, &quot;[filter][const]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#a66050dbfcadaf556c3a5a1e7abeb6a43',1,'TEST_CASE(&quot;filter: iterator with lambda can be assigned&quot;, &quot;[filter]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#add1ff5e2af404cfae878c65f836c4fb1',1,'TEST_CASE(&quot;filter: using identity&quot;, &quot;[filter]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#a3581946d5a369609bbbc9b9353ec6f36',1,'TEST_CASE(&quot;filter: skips null pointers&quot;, &quot;[filter]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#adf9b7cf1ad99886677baa885d21f9549',1,'TEST_CASE(&quot;filter: binds to lvalues, moves rvales&quot;, &quot;[filter]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#a6b87f7ab00e6d9c6d21e92592d9ec7e3',1,'TEST_CASE(&quot;filter: operator-&gt;&quot;, &quot;[filter]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#a1eaf7fe9bd914d17a935ebc691d21b3b',1,'TEST_CASE(&quot;filter: all elements fail predicate&quot;, &quot;[filter]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#aa22faf0bd377475184caf304f70bed66',1,'TEST_CASE(&quot;filter: doesn&apos;t move or copy elements of iterable&quot;, &quot;[filter]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#a94b4300dc5bfe8c9d9c9d1bd1f05f009',1,'TEST_CASE(&quot;filter: works with pipe&quot;, &quot;[filter]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#aee659f1a9f73c0f1e2b9ac83980a6435',1,'TEST_CASE(&quot;filter: using identity and pipe&quot;, &quot;[filter]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#a51962659f9f220a39337726406577ba2',1,'TEST_CASE(&quot;filter: Works with different begin and end types&quot;, &quot;[filter]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#a84bffb01f5359bfbd116ff7317323eb0',1,'TEST_CASE(&quot;filter: iterator meets requirements&quot;, &quot;[filter]&quot;):&#160;test_filter.cpp'],['../test__filter_8cpp.html#a316e9e83c176e71f75da289c19199c02',1,'TEST_CASE(&quot;filter: has correct ctor and assign ops&quot;, &quot;[filter]&quot;):&#160;test_filter.cpp'],['../test__filterfalse_8cpp.html#a18bcb0333c1da2b1dfad1eb5a0f40a8f',1,'TEST_CASE(&quot;filterfalse: handles different callable types&quot;, &quot;[filterfalse]&quot;):&#160;test_filterfalse.cpp'],['../test__filterfalse_8cpp.html#a7773cc70865d3c260f2929cfeec7f587',1,'TEST_CASE(&quot;filterfalse: handles pointer to member&quot;, &quot;[filterfalse]&quot;):&#160;test_filterfalse.cpp'],['../test__filterfalse_8cpp.html#ad803a8283dfdadb09f7db2f53e032e2e',1,'TEST_CASE(&quot;filterfalse: const iteration&quot;, &quot;[filterfalse][const]&quot;):&#160;test_filterfalse.cpp'],['../test__filterfalse_8cpp.html#a52e93d73832ba01216f724e286441dd3',1,'TEST_CASE(&quot;filterfalse: const iterator and non-const iterator can be compared&quot;, &quot;[filterfalse][const]&quot;):&#160;test_filterfalse.cpp'],['../test__filterfalse_8cpp.html#ab70017b64cb79eb6a7131c4581150f4a',1,'TEST_CASE(&quot;filterfalse: Works with different begin and end types&quot;, &quot;[filterfalse]&quot;):&#160;test_filterfalse.cpp'],['../test__filterfalse_8cpp.html#a2f6c089e0f06009839a3803a1517240d',1,'TEST_CASE(&quot;filterfalse: using identity&quot;, &quot;[filterfalse]&quot;):&#160;test_filterfalse.cpp'],['../test__filterfalse_8cpp.html#a45f288385236b927aefdf9a18805ff1d',1,'TEST_CASE(&quot;filterfalse: binds to lvalues, moves rvales&quot;, &quot;[filterfalse]&quot;):&#160;test_filterfalse.cpp'],['../test__filterfalse_8cpp.html#a6fd5318d741b31b35b7b4a9588494755',1,'TEST_CASE(&quot;filterfalse: all elements pass predicate&quot;, &quot;[filterfalse]&quot;):&#160;test_filterfalse.cpp'],['../test__filterfalse_8cpp.html#a8678fe1618026769f7e94020e6b02aa1',1,'TEST_CASE(&quot;filterfalse: iterator meets requirements&quot;, &quot;[filterfalse]&quot;):&#160;test_filterfalse.cpp'],['../test__filterfalse_8cpp.html#aafd2f7fb745ff091722e9e8627bab9bf',1,'TEST_CASE(&quot;filterfalse: has correct ctor and assign ops&quot;, &quot;[filterfalse]&quot;):&#160;test_filterfalse.cpp'],['../test__groupby_8cpp.html#aa81a8dbf7cc2f53144a74159d36fb23c',1,'TEST_CASE(&quot;groupby: works with lambda, callable, and function pointer&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#ab13a45ce5fea018c8426df9c408b4ea7',1,'TEST_CASE(&quot;groupby: handles pointer to member function&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#ab586faec3b8d5ddcd5094b3ff9a54b5b',1,'TEST_CASE(&quot;groupby: handles pointer to data member&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#af97576ceacd9d3cc96f7ed0df1fd09a3',1,'TEST_CASE(&quot;groupby: const iteration&quot;, &quot;[groupby][const]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#abebae4a3967bf75094b0eff56dee0d73',1,'TEST_CASE(&quot;groupby: iterators compare equal to non-const iterators&quot;, &quot;[groupby][const]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#a8c7c04a6959ef86c065576fa94da6425',1,'TEST_CASE(&quot;groupby: Works with different begin and end types&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#a7742f1c3b6bae2252757e917e3e68f00',1,'TEST_CASE(&quot;groupby: groups can be skipped completely&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#a2e042477efffceb5bdd1fa8b96e6103f',1,'TEST_CASE(&quot;groupby: groups can be skipped partially&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#a71f988626e5011052b00aad68dd15f87',1,'TEST_CASE(&quot;groupby: single argument uses elements as keys&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#ac97c6c685275d684954e98d9936d2882',1,'TEST_CASE(&quot;groupby: empty iterable yields nothing&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#af8913f7b966f5aa49849ac6e88e4f1c6',1,'TEST_CASE(&quot;groupby: inner iterator (group) not used&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#abbfa77f43ce0d98a121ddcc207742cfe',1,'TEST_CASE(&quot;groupby: doesn&apos;t double dereference&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#a1a449229aa745b2704ddf518f513d9b0',1,'TEST_CASE(&quot;grouby: iterator doesn&apos;t need to be dereferenced before advanced&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#a8e59b77c33eb2329414b4681fc8f5cea',1,'TEST_CASE(&quot;groupby: iterator can be dereferenced multiple times&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#aeb9e3ce735fa846a49ad4b0a8237a686',1,'TEST_CASE(&quot;groupby: copy constructed iterators behave as expected&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#a7ef53970c6ea4a0e2d25c4c18f54d572',1,'TEST_CASE(&quot;groupby: operator-&gt; on both iterator types&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#aa9a17792611deb1a0221dcf0d10a08c9',1,'TEST_CASE(&quot;groupby: iterator and groupiterator are correct&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__groupby_8cpp.html#ae7975cd1e2135bea96829eb2e82e79ed',1,'TEST_CASE(&quot;groupby: has correct ctor and assign ops&quot;, &quot;[groupby]&quot;):&#160;test_groupby.cpp'],['../test__helpers_8cpp.html#a9cb9fb8ec9ef01c8c7f99e0ccd10a437',1,'TEST_CASE(&quot;IsIterator fails when missing prefix ++&quot;, &quot;[helpers]&quot;):&#160;test_helpers.cpp'],['../test__helpers_8cpp.html#a76c117850d1e8069e8e9ace664fc097b',1,'TEST_CASE(&quot;IsIterator fails when missing postfix ++&quot;, &quot;[helpers]&quot;):&#160;test_helpers.cpp'],['../test__helpers_8cpp.html#a7031bbeb50f34a9c8d311d8795640d75',1,'TEST_CASE(&quot;IsIterator fails when missing ==&quot;, &quot;[helpers]&quot;):&#160;test_helpers.cpp'],['../test__helpers_8cpp.html#a0f765f051a92163f12a1a568744045f8',1,'TEST_CASE(&quot;IsIterator fails when missing *&quot;, &quot;[helpers]&quot;):&#160;test_helpers.cpp'],['../test__helpers_8cpp.html#a08ba508584254eb4ec7eaa76694a90ab',1,'TEST_CASE(&quot;IsIterator fails when missing copy-ctor&quot;, &quot;[helpers]&quot;):&#160;test_helpers.cpp'],['../test__helpers_8cpp.html#a1d9ad16da43ef18b817242bb0508ce1f',1,'TEST_CASE(&quot;IsIterator fails when missing copy assignment&quot;, &quot;[helpers]&quot;):&#160;test_helpers.cpp'],['../test__helpers_8cpp.html#accd40522607b5e8a0c5d6cfe42582a8b',1,'TEST_CASE(&quot;IsIterator passes a valid iterator&quot;, &quot;[helpers]&quot;):&#160;test_helpers.cpp'],['../test__helpers_8cpp.html#aa9667662560ea6db4a2dc6f87aab8114',1,'TEST_CASE(&quot;IsMoveConstructibleOnly false without move ctor&quot;, &quot;[helpers]&quot;):&#160;test_helpers.cpp'],['../test__helpers_8cpp.html#ada89afc002dd9e0804769ec58fbca88e',1,'TEST_CASE(&quot;IsMoveConstructibleOnly false with copy ctor&quot;, &quot;[helpers]&quot;):&#160;test_helpers.cpp'],['../test__helpers_8cpp.html#ae08af768fab8c590bb4b179132de2a93',1,'TEST_CASE(&quot;IsMoveConstructibleOnly false with move assign&quot;, &quot;[helpers]&quot;):&#160;test_helpers.cpp'],['../test__helpers_8cpp.html#a317a059bf4294e63dd2c43af73cfa142',1,'TEST_CASE(&quot;IsMoveConstructibleOnly false with copy assign&quot;, &quot;[helpers]&quot;):&#160;test_helpers.cpp'],['../test__helpers_8cpp.html#af4764672b75c52ffc4d15e3c8ea70ed5',1,'TEST_CASE(&quot;IsMoveConstructibleOnly true when met&quot;, &quot;[helpers]&quot;):&#160;test_helpers.cpp'],['../test__imap_8cpp.html#a064ff02beca325b69c5c2a2f5dbcbe6d',1,'TEST_CASE(&quot;imap: works with lambda, callable, and function&quot;, &quot;[imap]&quot;):&#160;test_imap.cpp'],['../test__imap_8cpp.html#ad3a52a0c71aa309ea4f10c9d648475dd',1,'TEST_CASE(&quot;imap: works with pointer to member&quot;, &quot;[imap]&quot;):&#160;test_imap.cpp'],['../test__imap_8cpp.html#a477234c866b2f3a69b6897b369b8bf7e',1,'TEST_CASE(&quot;imap: works with pointer to member function taking argument&quot;):&#160;test_imap.cpp'],['../test__imap_8cpp.html#a66751d56c08bce001ffa8fda922cccbd',1,'TEST_CASE(&quot;imap: Works with different begin and end types&quot;, &quot;[imap]&quot;):&#160;test_imap.cpp'],['../test__imap_8cpp.html#afb8721b0d5715ad03b8b29382f803f03',1,'TEST_CASE(&quot;imap: works with multiple sequences&quot;, &quot;[imap]&quot;):&#160;test_imap.cpp'],['../test__imap_8cpp.html#aa47106f338e23676e9c6a0ff9b2b1778',1,'TEST_CASE(&quot;imap: terminates on shortest squence&quot;, &quot;[imap]&quot;):&#160;test_imap.cpp'],['../test__imap_8cpp.html#af4ac7dfaa68dd14d5d04d218c5dcd9a5',1,'TEST_CASE(&quot;imap: operator-&gt;&quot;, &quot;[imap]&quot;):&#160;test_imap.cpp'],['../test__imap_8cpp.html#a0e58736479e70b91c1f07e08072415e5',1,'TEST_CASE(&quot;imap: empty sequence gives nothing&quot;, &quot;[imap]&quot;):&#160;test_imap.cpp'],['../test__imap_8cpp.html#aa0d59eb35a14b3b3fc3cedb7e57d9a3d',1,'TEST_CASE(&quot;imap: binds to lvalues, moves rvalues&quot;, &quot;[imap]&quot;):&#160;test_imap.cpp'],['../test__imap_8cpp.html#aab3017ca448139dea1474f160b777d1a',1,'TEST_CASE(&quot;imap: doesn&apos;t move or copy elements of iterable&quot;, &quot;[imap]&quot;):&#160;test_imap.cpp'],['../test__imap_8cpp.html#a91ca967cb08ef30282bd0ad7978079ac',1,'TEST_CASE(&quot;imap: postfix ++&quot;, &quot;[imap]&quot;):&#160;test_imap.cpp'],['../test__imap_8cpp.html#a915a49313c3ac164bd12483c44217b4f',1,'TEST_CASE(&quot;imap: iterator meets requirements&quot;, &quot;[imap]&quot;):&#160;test_imap.cpp'],['../test__imap_8cpp.html#abbe66fc07427f298712e8671af393fac',1,'TEST_CASE(&quot;imap: has correct ctor and assign ops&quot;, &quot;[imap]&quot;):&#160;test_imap.cpp'],['../test__iterator__wrapper_8cpp.html#a0591d25b681d8fdd97d5be509ee83b6f',1,'TEST_CASE(&quot;ensure test type iterators are totally comparable&quot;, &quot;[test_util&quot;):&#160;test_iterator_wrapper.cpp'],['../test__iterator__wrapper_8cpp.html#a251c08cf565fd7cbc5ee511340f7b763',1,'TEST_CASE(&quot;Operations on IteratorWrappers with SameTypes work&quot;, &quot;[base_iterator]&quot;):&#160;test_iterator_wrapper.cpp'],['../test__iterator__wrapper_8cpp.html#a9955934ba8edb2abc43cb1d4c0f94c96',1,'TEST_CASE(&quot;Operations on IteratorWrappers with DifferentTypes work&quot;, &quot;[base_iterator]&quot;):&#160;test_iterator_wrapper.cpp'],['../test__iterator__wrapper_8cpp.html#a41b8d889619e951b1f36a28f582879f8',1,'TEST_CASE(&quot;Can copy construct a IteratorWrapper with SameTypes&quot;, &quot;[base_iterator]&quot;):&#160;test_iterator_wrapper.cpp'],['../test__iterator__wrapper_8cpp.html#a7950c2ac226844b39fe7d9ba0567cee6',1,'TEST_CASE(&quot;Can copy assign a IteratorWrapper with SameTypes&quot;, &quot;[base_iterator]&quot;):&#160;test_iterator_wrapper.cpp'],['../test__iterator__wrapper_8cpp.html#ac7d2bce82b7ebb0b19562cf6545c4a6d',1,'TEST_CASE(&quot;Can copy construct a IteratorWrapper with DifferentTypes&quot;, &quot;[base_iterator]&quot;):&#160;test_iterator_wrapper.cpp'],['../test__iterator__wrapper_8cpp.html#a4bbf5f58604fe6a5410746aff0270318',1,'TEST_CASE(&quot;Can copy construct a IteratorWrapper with DifferenTypes&quot;, &quot;[base_iterator]&quot;):&#160;test_iterator_wrapper.cpp'],['../test__iteratoriterator_8cpp.html#ae051edbd245b17b66cc17028c12116c1',1,'TEST_CASE(&quot;Iterator over a vector of vector iterators&quot;, &quot;[iteratoriterator]&quot;):&#160;test_iteratoriterator.cpp'],['../test__iteratoriterator_8cpp.html#a4c6faa6f38e78ba68167f29254ac4598',1,'TEST_CASE(&quot;IteratorIterator operator-&gt;&quot;, &quot;[iteratoriterator]&quot;):&#160;test_iteratoriterator.cpp'],['../test__iteratoriterator_8cpp.html#ad6ed748cf3b147acc02ef39e23647cd7',1,'TEST_CASE(&quot;Iterate over a vector of string iterators&quot;, &quot;[iteratoriterator]&quot;):&#160;test_iteratoriterator.cpp'],['../test__iteratoriterator_8cpp.html#ac0fc2a280e9bb0ff213d32cb0322d1fe',1,'TEST_CASE(&quot;IteratorIterator supports mutable RandomAccessIterator operators&quot;, &quot;[iteratoriterator]&quot;):&#160;test_iteratoriterator.cpp'],['../test__iteratoriterator_8cpp.html#a1223e40cc936abc9512429f980748391',1,'TEST_CASE(&quot;IterIterWrapper supports several SequenceContainer methodes&quot;, &quot;[iteratoriterator]&quot;):&#160;test_iteratoriterator.cpp'],['../test__iterbase_8cpp.html#aa4c1eab2d0f4529b9ec1a3c04a02ab84',1,'TEST_CASE(&quot;Detects random access iterators correctly&quot;, &quot;[iterbase]&quot;):&#160;test_iterbase.cpp'],['../test__iterbase_8cpp.html#a625c5f357c4777a18e62951b8f229883',1,'TEST_CASE(&quot;Detects correct iterator types&quot;, &quot;[iterbase]&quot;):&#160;test_iterbase.cpp'],['../test__iterbase_8cpp.html#a2607a023aca2560d6542da57eb2551f7',1,'TEST_CASE(&quot;advance, next, size&quot;, &quot;[iterbase]&quot;):&#160;test_iterbase.cpp'],['../test__iterbase_8cpp.html#a35a492590c9ea9509bc2e057026c0235',1,'TEST_CASE(&quot;are_same&quot;, &quot;[iterbase]&quot;):&#160;test_iterbase.cpp'],['../test__iterbase_8cpp.html#a32dae283a58c93428c249c6bc321a777',1,'TEST_CASE(&quot;DerefHolder lvalue reference&quot;, &quot;[iterbase]&quot;):&#160;test_iterbase.cpp'],['../test__iterbase_8cpp.html#a80c6308b24c0de7df34cc9b36681278f',1,'TEST_CASE(&quot;DerefHolder non-reference&quot;, &quot;[iterbase]&quot;):&#160;test_iterbase.cpp'],['../test__iterbase_8cpp.html#a6619fc0e8498d12548900a5556aaf292',1,'TEST_CASE(&quot;get_begin returns correct type&quot;, &quot;[iterbase]&quot;):&#160;test_iterbase.cpp'],['../test__iterbase_8cpp.html#acef1700017b25f40dd1d1a7c2e51c6de',1,'TEST_CASE(&quot;Detects is_iterable with ADL conflicts&quot;, &quot;[iterbase]&quot;):&#160;test_iterbase.cpp'],['../test__mixed_8cpp.html#ae8de6543e72ae5519f55762d3dde38a9',1,'TEST_CASE(&quot;filtering doesn&apos;t dereference multiple times&quot;, &quot;[imap][filter]&quot;):&#160;test_mixed.cpp'],['../test__mixed_8cpp.html#ad8d8f0291823762e85ef3478b200d8fb',1,'TEST_CASE(&quot;dropwhile doesn&apos;t dereference multiple times&quot;, &quot;[imap][dropwhile]&quot;):&#160;test_mixed.cpp'],['../test__mixed_8cpp.html#a1b87a208f9289767999da54fd3f19e31',1,'TEST_CASE(&quot;takewhile doesn&apos;t dereference multiple times&quot;, &quot;[imap][takewhile]&quot;):&#160;test_mixed.cpp'],['../test__mixed_8cpp.html#aa0228de6bc1867a8bfcd59b09d848e38',1,'TEST_CASE(&quot;sorted(chain.from_iterable)&quot;, &quot;[sorted][chain.from_iterable]&quot;):&#160;test_mixed.cpp'],['../test__mixed_8cpp.html#a4bd089a222f0070390f0395181f59c22',1,'TEST_CASE(&quot;filter into enumerate with pipe&quot;, &quot;[filter][enumerate]&quot;):&#160;test_mixed.cpp'],['../test__mixed_8cpp.html#a0cd6e318929b499f377abde73c3afa9c',1,'TEST_CASE(&quot;chain.from_iterable: accept imap result that yields rvalues&quot;, &quot;[chain.from_iterable][imap]&quot;):&#160;test_mixed.cpp'],['../test__permutations_8cpp.html#a14fe56377e36a09ef5974ce76745ccad',1,'TEST_CASE(&quot;permutations: basic test, 3 element sequence&quot;, &quot;[permutations]&quot;):&#160;test_permutations.cpp'],['../test__permutations_8cpp.html#a539a3df6df18afd5453deb6091c7d7e8',1,'TEST_CASE(&quot;permutations: const iteration&quot;, &quot;[permutations][const]&quot;):&#160;test_permutations.cpp'],['../test__permutations_8cpp.html#ad4b74d290352b405273dbcb95639d5c8',1,'TEST_CASE(&quot;permutations: const iterators can be compared to non-const iteration&quot;, &quot;[permutations][const]&quot;):&#160;test_permutations.cpp'],['../test__permutations_8cpp.html#a2c6d95be66f9368b1c098fb530b52b90',1,'TEST_CASE(&quot;permutations: Works with different begin and end types&quot;, &quot;[permutations]&quot;):&#160;test_permutations.cpp'],['../test__permutations_8cpp.html#a3b28c9383fe18ed8479ef78b82c6118a',1,'TEST_CASE(&quot;permutations: empty sequence has one empy permutation&quot;, &quot;[permutations]&quot;):&#160;test_permutations.cpp'],['../test__permutations_8cpp.html#aed47e7851e27a687199393682efd4945',1,'TEST_CASE(&quot;permutations: iterators can be compared&quot;, &quot;[permutations]&quot;):&#160;test_permutations.cpp'],['../test__permutations_8cpp.html#a1c42110777f29555955b50cc3c0e3699',1,'TEST_CASE(&quot;permutations: binds to lvalues, moves rvalues&quot;, &quot;[permutations]&quot;):&#160;test_permutations.cpp'],['../test__permutations_8cpp.html#a8427717c16e0e44a5662c23c687d663f',1,'TEST_CASE(&quot;permutations doesn&apos;t move or copy elements of iterable&quot;, &quot;[permutations]&quot;):&#160;test_permutations.cpp'],['../test__permutations_8cpp.html#a7a5e063b2b04aba163434a821cccd3d0',1,'TEST_CASE(&quot;permutations: iterator meets requirements&quot;, &quot;[permutations]&quot;):&#160;test_permutations.cpp'],['../test__permutations_8cpp.html#af689dea2eb261091f683fcddff3272a1',1,'TEST_CASE(&quot;permutations: has correct ctor and assign ops&quot;, &quot;[permutations]&quot;):&#160;test_permutations.cpp'],['../test__powerset_8cpp.html#ada0248d56ccda284869e7c19f5662ddb',1,'TEST_CASE(&quot;powerset: basic test, [1, 2, 3]&quot;, &quot;[powerset]&quot;):&#160;test_powerset.cpp'],['../test__powerset_8cpp.html#ac48f77230ec73deb983d2e8b91ec9d9b',1,'TEST_CASE(&quot;powerset: const iteration&quot;, &quot;[powerset][const]&quot;):&#160;test_powerset.cpp'],['../test__powerset_8cpp.html#a68152184d7a28f8f58ba6348b4103b15',1,'TEST_CASE(&quot;powerset: Works with different begin and end types&quot;, &quot;[powerset]&quot;):&#160;test_powerset.cpp'],['../test__powerset_8cpp.html#a485552a717f1f9e877e62531cf25bcda',1,'TEST_CASE(&quot;powerset: empty sequence gives only empty set&quot;, &quot;[powerset]&quot;):&#160;test_powerset.cpp'],['../test__powerset_8cpp.html#a7f345680141b954cae6f6bae1e1bce20',1,'TEST_CASE(&quot;powerset: iterators can be compared&quot;, &quot;[powerset]&quot;):&#160;test_powerset.cpp'],['../test__powerset_8cpp.html#a65f271e165edb8b91afd331a5d11a478',1,'TEST_CASE(&quot;powerset: iterator copy ctor is correct&quot;, &quot;[powerset]&quot;):&#160;test_powerset.cpp'],['../test__powerset_8cpp.html#ab3748fbf930515f0eed08e05c5fe88c3',1,'TEST_CASE(&quot;powerset: binds to lvalues, moves rvalues&quot;, &quot;[powerset]&quot;):&#160;test_powerset.cpp'],['../test__powerset_8cpp.html#ac61c28c75cef22629b40e27a3963a0f6',1,'TEST_CASE(&quot;powerset: doesn&apos;t move or copy elements of iterable&quot;, &quot;[powerset]&quot;):&#160;test_powerset.cpp'],['../test__powerset_8cpp.html#a600d300b9817dfba1852f1178371fa56',1,'TEST_CASE(&quot;powerset: iterator meets requirements&quot;, &quot;[powerset]&quot;):&#160;test_powerset.cpp'],['../test__powerset_8cpp.html#a0f6e3367d247395c58231eefa896d6e1',1,'TEST_CASE(&quot;powerset: has correct ctor and assign ops&quot;, &quot;[powerset]&quot;):&#160;test_powerset.cpp'],['../test__product_8cpp.html#ae39f9374287e44e5b509fde81cf8ef86',1,'TEST_CASE(&quot;product: basic test, two sequences&quot;, &quot;[product]&quot;):&#160;test_product.cpp'],['../test__product_8cpp.html#ae45c184d6e95037b3a182b7a0f52c347',1,'TEST_CASE(&quot;product: const iteration&quot;, &quot;[product][const]&quot;):&#160;test_product.cpp'],['../test__product_8cpp.html#a61aa6e81c9586e7f13aeefe8c413e28e',1,'TEST_CASE(&quot;product: const iterators can be compared to non-const iterators&quot;, &quot;[product][const]&quot;):&#160;test_product.cpp'],['../test__product_8cpp.html#a6a03abeae663a0c088f6c9fddae3af8d',1,'TEST_CASE(&quot;product: two sequences where one has different begin and end&quot;, &quot;[product]&quot;):&#160;test_product.cpp'],['../test__product_8cpp.html#a9624d2422b4a47594a90c5e3ad52d8c0',1,'TEST_CASE(&quot;product: three sequences&quot;, &quot;[product]&quot;):&#160;test_product.cpp'],['../test__product_8cpp.html#ab82f5a653c4a354f6514dd929c42ce13',1,'TEST_CASE(&quot;product: with repeat&quot;, &quot;[product]&quot;):&#160;test_product.cpp'],['../test__product_8cpp.html#aa3d1cbe19e2de989360501e2efd2c521',1,'TEST_CASE(&quot;product: empty when any iterable is empty&quot;, &quot;[product]&quot;):&#160;test_product.cpp'],['../test__product_8cpp.html#a3e1af44c145442ad0efbde3c7ef80e44',1,'TEST_CASE(&quot;product: single iterable&quot;, &quot;[product]&quot;):&#160;test_product.cpp'],['../test__product_8cpp.html#a7b28c178eb09e51cc276e99c5b88a42f',1,'TEST_CASE(&quot;product: no arguments gives one empty tuple&quot;, &quot;[product&quot;):&#160;test_product.cpp'],['../test__product_8cpp.html#a64fabe0d3fecdbd159763f2e3c726537',1,'TEST_CASE(&quot;product: binds to lvalues and moves rvalues&quot;, &quot;[product]&quot;):&#160;test_product.cpp'],['../test__product_8cpp.html#a5639c5982ed15b77e7eeeb0d311955cf',1,'TEST_CASE(&quot;product: handles a lot of containers values&quot;, &quot;[product]&quot;):&#160;test_product.cpp'],['../test__product_8cpp.html#ae568421e5e70f35e1d60d6ff1d289bb8',1,'TEST_CASE(&quot;product: doesn&apos;t move or copy elements of iterable&quot;, &quot;[product]&quot;):&#160;test_product.cpp'],['../test__product_8cpp.html#a16fd4de1bc89e65bca8f0aba02d02f1a',1,'TEST_CASE(&quot;product: iterator meets requirements&quot;, &quot;[product]&quot;):&#160;test_product.cpp'],['../test__product_8cpp.html#a4965de8ce9e522a097e5d5f36238ff2c',1,'TEST_CASE(&quot;product: has correct ctor and assign ops&quot;, &quot;[product]&quot;):&#160;test_product.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a5185949974d2fa34097ed9a5dfbe6af6',1,'TEST_CASE(&quot;range: works with only stop&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a4636cafb92d1729c70671f602184e2bc',1,'TEST_CASE(&quot;range: works with start and stop&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#aa6fb93d2fb0717118ec145b9306f3af8',1,'TEST_CASE(&quot;range: works with positive step &gt; 1&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a5a0d548be7b2f172e0d1bf2bdd45e1f6',1,'TEST_CASE(&quot;range(0) is empty&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a481d53e11060184ea0d7bac231f731b3',1,'TEST_CASE(&quot;range: postfix++&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#ac87d60f360781ab08e57e1de38077237',1,'TEST_CASE(&quot;start &gt; stop produces empty range&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a2b88da2fb6505e36d8821fd1f4c7b7d8',1,'TEST_CASE(&quot;start &lt; stop and step &lt; 0 produces empty range&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#ab1a5dd8fe2aefb2b23187621b7367f30',1,'TEST_CASE(&quot;range: with only a negative stop is empty&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a177b2853a3345ee4e264d89da049f1b1',1,'TEST_CASE(&quot;range: works with negative step&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a26b6c3a74bced520fe85c50f7f13d1a9',1,'TEST_CASE(&quot;range: stops short when step doesn&apos;t divide stop-start&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#abbf170bc26ba6c6d09f027c09b4959fe',1,'TEST_CASE(&quot;range: stops short when step &gt; stop-start&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#ac876e93cac458a995d2e7b4fa2187f19',1,'TEST_CASE(&quot;range: step size of 0 gives an empty range&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a836cd2e16eb17bd1e629d2db636ccb1b',1,'TEST_CASE(&quot;range: can create constexpr ranges&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a9b43cde96fc8817309a638cb15400e85',1,'TEST_CASE(&quot;range: const iterators compare to non-const iterators&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a3ee760c4eefc319e643b25599c99df70',1,'TEST_CASE(&quot;range: works with a variable start, stop, and step&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a487e609cc77ff5bb564555d0e582484b',1,'TEST_CASE(&quot;range: forward iterator checks&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#ae22e3fac4ed70bdd5d75474570bb919e',1,'TEST_CASE(&quot;range: forward iterator with double, checks&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a1e909e89ade94acdff2194f7472f9d53',1,'TEST_CASE(&quot;range: using doubles&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#af2925ebd86a2c50ecca2b0ad7ebf45a2',1,'TEST_CASE(&quot;range: using doubles with start and stop&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a9206aaef9db0d86fa81e5eaeb2cd4bd2',1,'TEST_CASE(&quot;range: using doubles with start, stop and step&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a2a58c94db978edef91aea8804efcae62',1,'TEST_CASE(&quot;range: using doubles with negative&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a9c810ad0b552e77b5fc8181620e96d7f',1,'TEST_CASE(&quot;range: using doubles with uneven step&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a5c6d2adcffb0b2cc48250c323b395055',1,'TEST_CASE(&quot;range: using doubles detects empty ranges&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html#a5c81d969c755aba0785f382e215e0e46',1,'TEST_CASE(&quot;range: iterator meets forward iterator requirements&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../test__repeat_8cpp.html#a7c4d1ecf4374380aeaa9110873c3ee1e',1,'TEST_CASE(&quot;repeat: one argument keeps giving value back&quot;, &quot;[repeat]&quot;):&#160;test_repeat.cpp'],['../test__repeat_8cpp.html#a45b1ee7e227427060d4725c3b7dc7430',1,'TEST_CASE(&quot;repeat: can be used as constexpr&quot;, &quot;[repeat]&quot;):&#160;test_repeat.cpp'],['../test__repeat_8cpp.html#a51643825e4f0cddaa8effaa3acc8b856',1,'TEST_CASE(&quot;repeat: iterators compare to const iterators&quot;, &quot;[repeat]&quot;):&#160;test_repeat.cpp'],['../test__repeat_8cpp.html#afbf8e06cb52e5251f329bbfa281b632f',1,'TEST_CASE(&quot;repeat: two argument repeats a number of times&quot;, &quot;[repeat]&quot;):&#160;test_repeat.cpp'],['../test__repeat_8cpp.html#a75524159adedbecd80a4ba06c3cab7a3',1,'TEST_CASE(&quot;repeat: 0 count gives empty sequence&quot;, &quot;[repeat]&quot;):&#160;test_repeat.cpp'],['../test__repeat_8cpp.html#a0416aba559ce14d00d61d5d1716d3248',1,'TEST_CASE(&quot;repeat: negative count gives empty sequence&quot;, &quot;[repeat]&quot;):&#160;test_repeat.cpp'],['../test__repeat_8cpp.html#a16703014d9c2d58d5e2862c2f4298d25',1,'TEST_CASE(&quot;repeat: doesn&apos;t duplicate item&quot;, &quot;[repeat]&quot;):&#160;test_repeat.cpp'],['../test__repeat_8cpp.html#a23349eba36598377cf72e89f1fed4a31',1,'TEST_CASE(&quot;repeat: iterator meets requirements&quot;, &quot;[repeat]&quot;):&#160;test_repeat.cpp'],['../test__repeat_8cpp.html#a767b251fb771513c9112db2d64691bef',1,'TEST_CASE(&quot;repeat: has correct ctor and assign ops&quot;, &quot;[repeat]&quot;):&#160;test_repeat.cpp'],['../test__reversed_8cpp.html#a6a208e6914985153e06c808f273d32df',1,'TEST_CASE(&quot;reversed: can reverse a vector&quot;, &quot;[reversed]&quot;):&#160;test_reversed.cpp'],['../test__reversed_8cpp.html#a15bf97a834006b315180d429f2aa0c17',1,'TEST_CASE(&quot;reversed: const iteration&quot;, &quot;[reversed][const]&quot;):&#160;test_reversed.cpp'],['../test__reversed_8cpp.html#a615aa572827ca8a5ee691782b7c0ddee',1,'TEST_CASE(&quot;reversed: const iterators can be compared to non-const iterators&quot;, &quot;[reversed][const]&quot;):&#160;test_reversed.cpp'],['../test__reversed_8cpp.html#a79ad685abb6f9e8935b46c306c302b88',1,'TEST_CASE(&quot;reversed: can reverse an array&quot;, &quot;[reversed]&quot;):&#160;test_reversed.cpp'],['../test__reversed_8cpp.html#a4129ac9b802535475b1e5ebc452e4054',1,'TEST_CASE(&quot;reversed: empty when iterable is empty&quot;, &quot;[reversed]&quot;):&#160;test_reversed.cpp'],['../test__reversed_8cpp.html#a6e19638cd1b025dd140830b579f88c30',1,'TEST_CASE(&quot;reversed: moves rvalues and binds to lvalues&quot;, &quot;[reversed]&quot;):&#160;test_reversed.cpp'],['../test__reversed_8cpp.html#a42dade6a1062c26c86735304f4b72c2c',1,'TEST_CASE(&quot;reversed: doesn&apos;t move or copy elements of array&quot;, &quot;[reversed]&quot;):&#160;test_reversed.cpp'],['../test__reversed_8cpp.html#a05effe7147b1642f9014660988de975d',1,'TEST_CASE(&quot;reversed: with iterable doesn&apos;t move or copy elems&quot;, &quot;[reversed]&quot;):&#160;test_reversed.cpp'],['../test__reversed_8cpp.html#a594ac13c66e8af2d409989cb4628b6b3',1,'TEST_CASE(&quot;reversed: iterator meets requirements&quot;, &quot;[reversed]&quot;):&#160;test_reversed.cpp'],['../test__reversed_8cpp.html#a9c541601446f1e4a177fe5f62063c7fc',1,'TEST_CASE(&quot;reversed: has correct ctor and assign ops&quot;, &quot;[reversed]&quot;):&#160;test_reversed.cpp'],['../test__slice_8cpp.html#a5c1dd49a30d7d27827632f56acf40bdf',1,'TEST_CASE(&quot;slice: take from beginning&quot;, &quot;[slice]&quot;):&#160;test_slice.cpp'],['../test__slice_8cpp.html#a18a0102abf5e73cc0ee9b7772d5bba6c',1,'TEST_CASE(&quot;slice: const iteration&quot;, &quot;[slice][const]&quot;):&#160;test_slice.cpp'],['../test__slice_8cpp.html#a95bf35bb05b4631b18ca9bffde9c5997',1,'TEST_CASE(&quot;slice: const iterator can be compared to non-const iterator&quot;, &quot;[slice][const]&quot;):&#160;test_slice.cpp'],['../test__slice_8cpp.html#adaccd2f45d626667c4eab9be693218d5',1,'TEST_CASE(&quot;slice: start and stop&quot;, &quot;[slice]&quot;):&#160;test_slice.cpp'],['../test__slice_8cpp.html#a875538149efccf0de6eb94c5645ed9d1',1,'TEST_CASE(&quot;slice: Works with different begin and end types&quot;, &quot;[slice]&quot;):&#160;test_slice.cpp'],['../test__slice_8cpp.html#a456b87b64086712ef3ac014764a6ab66',1,'TEST_CASE(&quot;slice: start, stop, step&quot;, &quot;[slice]&quot;):&#160;test_slice.cpp'],['../test__slice_8cpp.html#a053c543b36985c45e14d6041d66975a6',1,'TEST_CASE(&quot;slice: empty iterable&quot;, &quot;[slice]&quot;):&#160;test_slice.cpp'],['../test__slice_8cpp.html#a160c56b041a50e06838bfeaa2fd8ab74',1,'TEST_CASE(&quot;slice: stop is beyond end of iterable&quot;, &quot;[slice]&quot;):&#160;test_slice.cpp'],['../test__slice_8cpp.html#a5706ade125fbd6f0da4bba3c81780574',1,'TEST_CASE(&quot;slice: start is beyond end of iterable&quot;, &quot;[slice]&quot;):&#160;test_slice.cpp'],['../test__slice_8cpp.html#a3c63c129defe44416a0b3a95d3cf428a',1,'TEST_CASE(&quot;slice: (stop - start) % step != 0&quot;, &quot;[slice]&quot;):&#160;test_slice.cpp'],['../test__slice_8cpp.html#acede8536330308d9fb271a45c40047b3',1,'TEST_CASE(&quot;slice: invalid ranges give 0 size slices&quot;, &quot;[slice]&quot;):&#160;test_slice.cpp'],['../test__slice_8cpp.html#ac5bf263b8fd545901b12c4445645b402',1,'TEST_CASE(&quot;slice: moves rvalues and binds to lvalues&quot;, &quot;[slice]&quot;):&#160;test_slice.cpp'],['../test__slice_8cpp.html#a2e35424eb26adfd9a9b6085785e62cdb',1,'TEST_CASE(&quot;slice: with iterable doesn&apos;t move or copy elems&quot;, &quot;[slice]&quot;):&#160;test_slice.cpp'],['../test__slice_8cpp.html#ad3417a891fcae954559e6d1a6fed9ae5',1,'TEST_CASE(&quot;slice: iterator meets requirements&quot;, &quot;[slice]&quot;):&#160;test_slice.cpp'],['../test__slice_8cpp.html#a79d1429f89a40d40161ced2986aa3baa',1,'TEST_CASE(&quot;slice: has correct ctor and assign ops&quot;, &quot;[slice]&quot;):&#160;test_slice.cpp'],['../test__sliding__window_8cpp.html#a7a1902e2eea5b8157a5b7ca504f90ca4',1,'TEST_CASE(&quot;sliding_window: window of size 3&quot;, &quot;[sliding_window]&quot;):&#160;test_sliding_window.cpp'],['../test__sliding__window_8cpp.html#a68866bc444fff96d9b7f75d9c78d951b',1,'TEST_CASE(&quot;sliding_window: const iteration&quot;, &quot;[sliding_window][const]&quot;):&#160;test_sliding_window.cpp'],['../test__sliding__window_8cpp.html#a085e537ae00e3ac7e91e3a85be7857ac',1,'TEST_CASE(&quot;sliding_window: const iterators can be compared to non-const iterators&quot;, &quot;[sliding_window][const]&quot;):&#160;test_sliding_window.cpp'],['../test__sliding__window_8cpp.html#af31f956e8f74883c11be19dfb605c4bd',1,'TEST_CASE(&quot;sliding_window: Works with different begin and end types&quot;, &quot;[sliding_window]&quot;):&#160;test_sliding_window.cpp'],['../test__sliding__window_8cpp.html#a26d413c8a758232027fa1edf6af6ccdf',1,'TEST_CASE(&quot;sliding window: oversized window is empty&quot;, &quot;[sliding_window]&quot;):&#160;test_sliding_window.cpp'],['../test__sliding__window_8cpp.html#ad39aec63d66ac1f0c6374fddc99a1321',1,'TEST_CASE(&quot;sliding window: window size == len(iterable)&quot;, &quot;[sliding_window]&quot;):&#160;test_sliding_window.cpp'],['../test__sliding__window_8cpp.html#a555d634b4edc38fc756977e23ddb7834',1,'TEST_CASE(&quot;sliding window: empty iterable is empty&quot;, &quot;[sliding_window]&quot;):&#160;test_sliding_window.cpp'],['../test__sliding__window_8cpp.html#aa95a5f8b901ecba2eb07cfb18e1ab6f1',1,'TEST_CASE(&quot;sliding window: window size of 1&quot;, &quot;[sliding_window]&quot;):&#160;test_sliding_window.cpp'],['../test__sliding__window_8cpp.html#ac9708b808205c198685bfc9280edeab3',1,'TEST_CASE(&quot;sliding window: window size of 0&quot;, &quot;[sliding_window]&quot;):&#160;test_sliding_window.cpp'],['../test__sliding__window_8cpp.html#af5303beecb09dc24ec81f2ed3e3ba612',1,'TEST_CASE(&quot;sliding window: moves rvalues and binds to lvalues&quot;, &quot;[sliding_window]&quot;):&#160;test_sliding_window.cpp'],['../test__sliding__window_8cpp.html#a127504c1aecde57a17ae589513e60ddc',1,'TEST_CASE(&quot;sliding window: doesn&apos;t copy elements&quot;, &quot;[sliding_window]&quot;):&#160;test_sliding_window.cpp'],['../test__sliding__window_8cpp.html#a61198bd50ada7c28db276be0ee7fe195',1,'TEST_CASE(&quot;sliding_window: iterator meets requirements&quot;, &quot;[sliding_window]&quot;):&#160;test_sliding_window.cpp'],['../test__sliding__window_8cpp.html#a1c3dcbd1ffff1a344e4947977b24e258',1,'TEST_CASE(&quot;sliding_window: has correct ctor and assign ops&quot;, &quot;[sliding_window]&quot;):&#160;test_sliding_window.cpp'],['../test__sorted_8cpp.html#a766d4e9972428515b1e972543b17674a',1,'TEST_CASE(&quot;sorted: iterates through a vector in sorted order&quot;, &quot;[sorted]&quot;):&#160;test_sorted.cpp'],['../test__sorted_8cpp.html#aed16cf8641c122b33c0dc01eed32dd80',1,'TEST_CASE(&quot;sorted: handles pointer to member function&quot;, &quot;[sorted]&quot;):&#160;test_sorted.cpp'],['../test__sorted_8cpp.html#afa13c7ce7dd84c3a21858bf2d31bff2d',1,'TEST_CASE(&quot;sorted: const iteration&quot;, &quot;[sorted][const]&quot;):&#160;test_sorted.cpp'],['../test__sorted_8cpp.html#ac30afb25f221c32390f89511b020acd0',1,'TEST_CASE(&quot;sorted: const iterators can be compared to non-const iterators&quot;, &quot;[sorted][const][!hide]&quot;):&#160;test_sorted.cpp'],['../test__sorted_8cpp.html#a235cdfe630801259e78f8c000e3bb2c4',1,'TEST_CASE(&quot;sorted: can modify elements through sorted&quot;, &quot;[sorted]&quot;):&#160;test_sorted.cpp'],['../test__sorted_8cpp.html#a529874cbcd3c71cc40790112ee19d86d',1,'TEST_CASE(&quot;sorted: Works with different begin and end types&quot;, &quot;[sorted]&quot;):&#160;test_sorted.cpp'],['../test__sorted_8cpp.html#a8b2835c174d54dd123397176a22eb4a5',1,'TEST_CASE(&quot;sorted: can iterate over unordered container&quot;, &quot;[sorted]&quot;):&#160;test_sorted.cpp'],['../test__sorted_8cpp.html#ad20f1bf7753c5ad7e4a8f2e484856f12',1,'TEST_CASE(&quot;sorted: empty when iterable is empty&quot;, &quot;[sorted]&quot;):&#160;test_sorted.cpp'],['../test__sorted_8cpp.html#a181d5b170a5a5a2b94d6bb3ec52c0a08',1,'TEST_CASE(&quot;sorted: works with different callable types&quot;, &quot;[sorted]&quot;):&#160;test_sorted.cpp'],['../test__sorted_8cpp.html#aa4eaa8fda15b04bc1921601038bbc891',1,'TEST_CASE(&quot;sorted: moves rvalues and binds to lvalues&quot;, &quot;[sorted]&quot;):&#160;test_sorted.cpp'],['../test__sorted_8cpp.html#af3a3bc009ea91e831385e3a60da7dbdf',1,'TEST_CASE(&quot;sorted: doesn&apos;t move or copy elements of iterable&quot;, &quot;[sorted]&quot;):&#160;test_sorted.cpp'],['../test__sorted_8cpp.html#a5d6a78395354da0b3366c780a6a3c064',1,'TEST_CASE(&quot;sorted: has correct ctor and assign ops&quot;, &quot;[sorted]&quot;):&#160;test_sorted.cpp'],['../test__sorted_8cpp.html#af12cf5e6c9391b8be76a954feb261bb3',1,'TEST_CASE(&quot;sorted: iterator meets requirements&quot;, &quot;[sorted]&quot;):&#160;test_sorted.cpp'],['../test__starmap_8cpp.html#a93eaf2589680909d7321381a5cb524e8',1,'TEST_CASE(&quot;starmap: works with function pointer and lambda&quot;, &quot;[starmap]&quot;):&#160;test_starmap.cpp'],['../test__starmap_8cpp.html#ab1225f3d7234c364f4a7fda56ad6ea18',1,'TEST_CASE(&quot;starmap: works with pointer to member function&quot;, &quot;[starmap]&quot;):&#160;test_starmap.cpp'],['../test__starmap_8cpp.html#a011aec32754a00fe800ef5194cdf7b2b',1,'TEST_CASE(&quot;starmap: vector of pairs const iteration&quot;, &quot;[starmap][const]&quot;):&#160;test_starmap.cpp'],['../test__starmap_8cpp.html#a97e12ab88a3f035d407d61549b2aff5c',1,'TEST_CASE(&quot;starmap: vector of pairs const iterators can be compared to non-const &quot; &quot;iterators&quot;, &quot;[starmap][const]&quot;):&#160;test_starmap.cpp'],['../test__starmap_8cpp.html#a2009ca4ea9c1eca6a967401bc003c593',1,'TEST_CASE(&quot;starmap: Works with different begin and end types&quot;, &quot;[starmap]&quot;):&#160;test_starmap.cpp'],['../test__starmap_8cpp.html#a6b97e0d5495b3d9534d27e7738a1d902',1,'TEST_CASE(&quot;starmap: tuple of tuples const iteration&quot;, &quot;[starmap][const]&quot;):&#160;test_starmap.cpp'],['../test__starmap_8cpp.html#a0c0ebbd8bd2f35d710c32f04fd2379a9',1,'TEST_CASE(&quot;starmap: tuple of tuples const iterators can be compared to non-const &quot; &quot;iterator&quot;, &quot;[starmap][const]&quot;):&#160;test_starmap.cpp'],['../test__starmap_8cpp.html#aa9cc120cad028fcfb44a099bc4bd5565',1,'TEST_CASE(&quot;starmap: list of tuples&quot;, &quot;[starmap]&quot;):&#160;test_starmap.cpp'],['../test__starmap_8cpp.html#a43d27ac816882c18837224068541120c',1,'TEST_CASE(&quot;starmap: tuple of tuples&quot;, &quot;[starmap]&quot;):&#160;test_starmap.cpp'],['../test__starmap_8cpp.html#af0201f962b3d53a73776e35df3050aab',1,'TEST_CASE(&quot;starmap: tuple of pairs&quot;, &quot;[starmap]&quot;):&#160;test_starmap.cpp'],['../test__starmap_8cpp.html#ad40102024ea24a2f0c4c1708b8fcfe35',1,'TEST_CASE(&quot;starmap: moves rvalues, binds to lvalues&quot;, &quot;[starmap]&quot;):&#160;test_starmap.cpp'],['../test__starmap_8cpp.html#a4fd55af6f0edfc4ea8e65662fdebd3d4',1,'TEST_CASE(&quot;starmap: iterator meets requirements&quot;, &quot;[starmap]&quot;):&#160;test_starmap.cpp'],['../test__starmap_8cpp.html#ab26740320da52ed383d0a3ecb5bf579f',1,'TEST_CASE(&quot;starmap:  tuple of tuples iterator meets requirements&quot;, &quot;[starmap]&quot;):&#160;test_starmap.cpp'],['../test__takewhile_8cpp.html#a4ba1a0c8a49d1fbc742a861832db4fa1',1,'TEST_CASE(&quot;takewhile: works with lambda, callable, and function pointer&quot;, &quot;[takewhile]&quot;):&#160;test_takewhile.cpp'],['../test__takewhile_8cpp.html#a3924b05cc97ebad40de390771cf973f1',1,'TEST_CASE(&quot;takewhile: handles pointer to member&quot;, &quot;[takewhile]&quot;):&#160;test_takewhile.cpp'],['../test__takewhile_8cpp.html#a19466a1e2d1186f9f6e7dc8c979fb1c1',1,'TEST_CASE(&quot;takewhile: supports const iteration&quot;, &quot;[takewhile][const]&quot;):&#160;test_takewhile.cpp'],['../test__takewhile_8cpp.html#ae98549672acb8f3bb6fb4ca45e9096b9',1,'TEST_CASE(&quot;takewhile: const iterator and non-const iterator are comparable&quot;, &quot;[takewhile][const]&quot;):&#160;test_takewhile.cpp'],['../test__takewhile_8cpp.html#aababde13bdde8658da9830caa0626ac9',1,'TEST_CASE(&quot;takewhile: Works with different begin and end types&quot;, &quot;[takewhile]&quot;):&#160;test_takewhile.cpp'],['../test__takewhile_8cpp.html#a1620c05e1939c9fa3e5def8f96a4f851',1,'TEST_CASE(&quot;takewhile: identity&quot;, &quot;[takewhile]&quot;):&#160;test_takewhile.cpp'],['../test__takewhile_8cpp.html#a74255bc47a0acdcd69a4a422fe8ccddf',1,'TEST_CASE(&quot;takewhile: everything passes predicate&quot;, &quot;[takewhile]&quot;):&#160;test_takewhile.cpp'],['../test__takewhile_8cpp.html#a95852117d4fb956f79500900cde9b739',1,'TEST_CASE(&quot;takewhile: empty iterable is empty&quot;, &quot;[takewhile]&quot;):&#160;test_takewhile.cpp'],['../test__takewhile_8cpp.html#a07cea322370a2d18e0ce1397ca18ca05',1,'TEST_CASE(&quot;takewhile: when first element fails predicate, it&apos;s empty&quot; &quot;[takewhile]&quot;):&#160;test_takewhile.cpp'],['../test__takewhile_8cpp.html#a22379ad74a0144ef3f1ce8b0ecaf9bbf',1,'TEST_CASE(&quot;takewhile: moves rvalues, binds to lvalues&quot;, &quot;[takewhile]&quot;):&#160;test_takewhile.cpp'],['../test__takewhile_8cpp.html#ae37197d0e5f81435b7ae05161bbe0221',1,'TEST_CASE(&quot;takewhile: with iterable doesn&apos;t move or copy elements&quot;, &quot;[takewhile]&quot;):&#160;test_takewhile.cpp'],['../test__takewhile_8cpp.html#ae7ae2d575abf6124a92ecf6a69c7b320',1,'TEST_CASE(&quot;takewhile: iterator meets requirements&quot;, &quot;[takewhile]&quot;):&#160;test_takewhile.cpp'],['../test__takewhile_8cpp.html#af002be5c454c2ce8a1dd6732ceac5d8f',1,'TEST_CASE(&quot;takewhile: has correct ctor and assign ops&quot;, &quot;[takewhile]&quot;):&#160;test_takewhile.cpp'],['../test__unique__everseen_8cpp.html#a0688aabeb4918fffbe575932d896b9e6',1,'TEST_CASE(&quot;unique everseen: adjacent repeating values&quot;, &quot;[unique_everseen]&quot;):&#160;test_unique_everseen.cpp'],['../test__unique__everseen_8cpp.html#a394973df1b05cb29305b050d5a419c10',1,'TEST_CASE(&quot;unique everseen: const iteration&quot;, &quot;[unique_everseen][const]&quot;):&#160;test_unique_everseen.cpp'],['../test__unique__everseen_8cpp.html#a328509c1af62540a9eb040399502ef08',1,'TEST_CASE(&quot;unique everseen: const iterators can be compared to non-const iterators&quot;, &quot;[unique_everseen][const]&quot;):&#160;test_unique_everseen.cpp'],['../test__unique__everseen_8cpp.html#a6edf1d7dbec803737af40f70d57f2886',1,'TEST_CASE(&quot;unique everseen: nonadjacent repeating values&quot;, &quot;[unique_everseen]&quot;):&#160;test_unique_everseen.cpp'],['../test__unique__everseen_8cpp.html#a4f58ee7b37a7eaccb2efa375ec0b8f46',1,'TEST_CASE(&quot;unique everseen: moves rvalues, binds to lvalues&quot;, &quot;[unique_everseen]&quot;):&#160;test_unique_everseen.cpp'],['../test__unique__everseen_8cpp.html#a1c75a641b12a55d4ebf29bcbf28f258f',1,'TEST_CASE(&quot;unique everseen: Works with different begin and end types&quot;, &quot;[unique_everseen]&quot;):&#160;test_unique_everseen.cpp'],['../test__unique__everseen_8cpp.html#aa0151d66d68d8e6a142b08a1523fc735',1,'TEST_CASE(&quot;unique_everseen: iterator meets requirements&quot;, &quot;[unique_everseen]&quot;):&#160;test_unique_everseen.cpp'],['../test__unique__everseen_8cpp.html#a0d431a9f28de1d8765ebb752a109dbb2',1,'TEST_CASE(&quot;unique_everseen: has correct ctor and assign ops&quot;, &quot;[unique_everseen]&quot;):&#160;test_unique_everseen.cpp'],['../test__unique__justseen_8cpp.html#ad3698391cabd11a2be756a499665648a',1,'TEST_CASE(&quot;unique justseen: adjacent repeating values&quot;, &quot;[unique_justseen]&quot;):&#160;test_unique_justseen.cpp'],['../test__unique__justseen_8cpp.html#a04d0a624d43f5cfae29b80fdf1c9f13b',1,'TEST_CASE(&quot;unique justseen: const iteration&quot;, &quot;[unique_justseen][const]&quot;):&#160;test_unique_justseen.cpp'],['../test__unique__justseen_8cpp.html#ac48d4c12385a251562d1656e49cf0c61',1,'TEST_CASE(&quot;unique justseen: const iterator can be compared to non-const iterators&quot;, &quot;[unique_justseen][const]&quot;):&#160;test_unique_justseen.cpp'],['../test__unique__justseen_8cpp.html#aaf0bd2391836e54878205806fda488f0',1,'TEST_CASE(&quot;unique justseen: some repeating values&quot;, &quot;[unique_justseen]&quot;):&#160;test_unique_justseen.cpp'],['../test__unique__justseen_8cpp.html#a53a41632199b2db197a1600bad04f6c4',1,'TEST_CASE(&quot;unique justseen: Works with different begin and end types&quot;, &quot;[unique_justseen]&quot;):&#160;test_unique_justseen.cpp'],['../test__unique__justseen_8cpp.html#a980e336171c606ea72cb9131859a51e6',1,'TEST_CASE(&quot;unique justseen: doesn&apos;t omit non-adjacent duplicates&quot;, &quot;[unique_justseen]&quot;):&#160;test_unique_justseen.cpp'],['../test__unique__justseen_8cpp.html#a8c82f0c01b29a4ac8c5a012af03ea3be',1,'TEST_CASE(&quot;unique justseen: moves and binds correctly&quot;, &quot;[unique_justseen]&quot;):&#160;test_unique_justseen.cpp'],['../test__unique__justseen_8cpp.html#abb142ab145517aef6b1071cc31f09e8b',1,'TEST_CASE(&quot;unique_justseen: iterator meets requirements&quot;, &quot;[unique_justseen]&quot;):&#160;test_unique_justseen.cpp'],['../test__unique__justseen_8cpp.html#a48c6e3642fa10680de1b51a57e9ed069',1,'TEST_CASE(&quot;unique_justseen: has correct ctor and assign ops&quot;, &quot;[unique_justseen]&quot;):&#160;test_unique_justseen.cpp'],['../test__zip_8cpp.html#ae63fad3edb4054523fd87f297c5786f6',1,'TEST_CASE(&quot;zip: Simple case, same length&quot;, &quot;[zip]&quot;):&#160;test_zip.cpp'],['../test__zip_8cpp.html#a67fa66528a18fca4d62ecf46ef6babdd',1,'TEST_CASE(&quot;zip: const iteration&quot;, &quot;[zip][const]&quot;):&#160;test_zip.cpp'],['../test__zip_8cpp.html#a0edd8e1846bde3e344824064b8918493',1,'TEST_CASE(&quot;zip: const iterators can be compared to non-const iterators&quot;, &quot;[zip][const]&quot;):&#160;test_zip.cpp'],['../test__zip_8cpp.html#a8b91068e0c84b3f89d923a088c968d50',1,'TEST_CASE(&quot;zip: three sequences, one sequence has different begin and end&quot;, &quot;[zip]&quot;):&#160;test_zip.cpp'],['../test__zip_8cpp.html#aae0b9f57a5ab1c5188b6af162b1ce037',1,'TEST_CASE(&quot;zip: One empty, all empty&quot;, &quot;[zip]&quot;):&#160;test_zip.cpp'],['../test__zip_8cpp.html#a37d408e54e4efc935cc5a08e3ebafae4',1,'TEST_CASE(&quot;zip: terminates on shortest sequence&quot;, &quot;[zip]&quot;):&#160;test_zip.cpp'],['../test__zip_8cpp.html#afd446e0f1bc73baf02773488e6d1ba09',1,'TEST_CASE(&quot;zip: Empty&quot;, &quot;[zip]&quot;):&#160;test_zip.cpp'],['../test__zip_8cpp.html#a3779b24adfb8ab6643ac6257d5e3c2ec',1,'TEST_CASE(&quot;zip: Modify sequence through zip&quot;, &quot;[zip]&quot;):&#160;test_zip.cpp'],['../test__zip_8cpp.html#a0d13a43890c3e46e722cc38b8b6c9611',1,'TEST_CASE(&quot;zip: binds reference when it should&quot;, &quot;[zip]&quot;):&#160;test_zip.cpp'],['../test__zip_8cpp.html#adb236a3752807414283d593ad3752fc1',1,'TEST_CASE(&quot;zip: moves rvalues&quot;, &quot;[zip]&quot;):&#160;test_zip.cpp'],['../test__zip_8cpp.html#ad78acdd91149796cb9011ad0362effe6',1,'TEST_CASE(&quot;zip: Can bind ref and move in single zip&quot;, &quot;[zip]&quot;):&#160;test_zip.cpp'],['../test__zip_8cpp.html#a3a55c6bf36c6801e920aa3461e26e3ae',1,'TEST_CASE(&quot;zip: doesn&apos;t move or copy elements of iterable&quot;, &quot;[zip]&quot;):&#160;test_zip.cpp'],['../test__zip_8cpp.html#aa096198c818aea230bb158402edcf79b',1,'TEST_CASE(&quot;zip: postfix ++&quot;, &quot;[zip]&quot;):&#160;test_zip.cpp'],['../test__zip_8cpp.html#a0e15cc786fdb3a6b9b137f7d3372250b',1,'TEST_CASE(&quot;zip: iterator meets requirements&quot;, &quot;[zip]&quot;):&#160;test_zip.cpp'],['../test__zip_8cpp.html#ab8e45a242e499bd51fc3b815ecd2775d',1,'TEST_CASE(&quot;zip: has correct ctor and assign ops&quot;, &quot;[zip]&quot;):&#160;test_zip.cpp'],['../test__zip__longest_8cpp.html#a2c76522535bdfa8b831052429c7e868e',1,'TEST_CASE(&quot;zip longest: correctly detects longest at any position&quot;, &quot;[zip_longest]&quot;):&#160;test_zip_longest.cpp'],['../test__zip__longest_8cpp.html#af851bac46f7ed89102458cd53c55b33c',1,'TEST_CASE(&quot;zip_longest: three sequences, one sequence has different begin and end&quot;, &quot;[zip_longest]&quot;):&#160;test_zip_longest.cpp'],['../test__zip__longest_8cpp.html#ac1ff7ece58cc315c3c2bf7251d1a066a',1,'TEST_CASE(&quot;zip_longest: const iteration&quot;, &quot;[zip_longest][const]&quot;):&#160;test_zip_longest.cpp'],['../test__zip__longest_8cpp.html#a4392c94b006dae003e9fc06f2436c036',1,'TEST_CASE(&quot;zip_longest: const iterators can be compared to non-const iterators&quot;, &quot;[zip_longest][const]&quot;):&#160;test_zip_longest.cpp'],['../test__zip__longest_8cpp.html#ad919a842bca880f5535a3c81fe4142c2',1,'TEST_CASE(&quot;zip longest: when all are empty, terminates right away&quot;, &quot;[zip_longest]&quot;):&#160;test_zip_longest.cpp'],['../test__zip__longest_8cpp.html#a98a409822642cd1e6e2edc2d7da3fc37',1,'TEST_CASE(&quot;zip longest: can modify zipped sequences&quot;, &quot;[zip_longest]&quot;):&#160;test_zip_longest.cpp'],['../test__zip__longest_8cpp.html#a5d019a374e441329b5042bac7ccaa952',1,'TEST_CASE(&quot;zip longest: empty zip_longest() is empty&quot;, &quot;[zip_longest]&quot;):&#160;test_zip_longest.cpp'],['../test__zip__longest_8cpp.html#ac9b78dc0a497aca5c83673a4c9364305',1,'TEST_CASE(&quot;zip_longest: binds to lvalues, moves rvalues&quot;, &quot;[zip_longest]&quot;):&#160;test_zip_longest.cpp'],['../test__zip__longest_8cpp.html#a917e4d17d9fa61f1d9bc300bee8ad6fc',1,'TEST_CASE(&quot;zip_longest: doesn&apos;t move or copy elements&quot;, &quot;[zip_longest]&quot;):&#160;test_zip_longest.cpp'],['../test__zip__longest_8cpp.html#a5eb19333bb64f9cabe7c0d4311c37f57',1,'TEST_CASE(&quot;zip_longest: iterator meets requirements&quot;, &quot;[zip_longest]&quot;):&#160;test_zip_longest.cpp'],['../test__zip__longest_8cpp.html#a897468cdd9c29e9c5d4e96d5cab8c314',1,'TEST_CASE(&quot;zip_longest: has correct ctor and assign ops&quot;, &quot;[zip_longest]&quot;):&#160;test_zip_longest.cpp'],['../test__bpqueue_8cpp.html#a6ac67b28d3dfea028345f3fd34849983',1,'TEST_CASE(&quot;Test BPQueue&quot;, &quot;[bpqueue]&quot;):&#160;test_bpqueue.cpp'],['../test__dllist_8cpp.html#a32742673c0afcb00f5a5bce01fcf21a9',1,'TEST_CASE(&quot;Test dllist&quot;, &quot;[dllist]&quot;):&#160;test_dllist.cpp'],['../test__dllist_8cpp.html#a87f6139caae1311915bcae9e6bbc14c7',1,'TEST_CASE(&quot;Test robin&quot;, &quot;[robin]&quot;):&#160;test_dllist.cpp'],['../test__FMBiGainMgr_8cpp.html#a6dbac122a401853f8d8ec2b46364ef96',1,'TEST_CASE(&quot;Test FMBiGainMgr&quot;, &quot;[test_FMBiGainMgr]&quot;):&#160;test_FMBiGainMgr.cpp'],['../test__FMBiGainMgr_8cpp.html#ae1c9957594c9539b69d085f0c6000187',1,'TEST_CASE(&quot;Test FMBiGainMgr 2&quot;, &quot;[test_FMBiGainMgr2]&quot;):&#160;test_FMBiGainMgr.cpp'],['../test__FMBiPartMgr_8cpp.html#ae77f825d1f7f8beace2b17ee6a85aaf6',1,'TEST_CASE(&quot;Test FMBiPartMgr&quot;, &quot;[test_FMBiPartMgr]&quot;):&#160;test_FMBiPartMgr.cpp'],['../test__FMBiPartMgr_8cpp.html#a89085776313d69a6fc66d9b5bdd5edcc',1,'TEST_CASE(&quot;Test FMBiPartMgr dwarf&quot;, &quot;[test_FMBiPartMgr]&quot;):&#160;test_FMBiPartMgr.cpp'],['../test__FMBiPartMgr_8cpp.html#af02c73153c3e6e9072bb8f5e7fc7c8e4',1,'TEST_CASE(&quot;Test FMBiPartMgr p1&quot;, &quot;[test_FMBiPartMgr]&quot;):&#160;test_FMBiPartMgr.cpp'],['../test__FMBiPartMgr_8cpp.html#a666190aa8de479ed542367fae19ee112',1,'TEST_CASE(&quot;Test FMBiPartMgr ibm01&quot;, &quot;[test_FMBiPartMgr]&quot;):&#160;test_FMBiPartMgr.cpp'],['../test__FMKWayPartMgr_8cpp.html#afeb6f3c88c2b866631888c7abdd1b23f',1,'TEST_CASE(&quot;Test FMKWayPartMgr&quot;, &quot;[test_FMKWayPartMgr]&quot;):&#160;test_FMKWayPartMgr.cpp'],['../test__FMKWayPartMgr_8cpp.html#ad9b7e3355cb23a2d62a64ef4f8f9f362',1,'TEST_CASE(&quot;Test FMKWayPartMgr p1&quot;, &quot;[test_FMKWayPartMgr]&quot;):&#160;test_FMKWayPartMgr.cpp'],['../test__graph_8cpp.html#aa1d55e051963be3857723d7db03ed83b',1,'TEST_CASE(&quot;Test xnetwork&quot;, &quot;[test_xnetwork]&quot;):&#160;test_graph.cpp'],['../test__min__cover_8cpp.html#a7e72cb88ccf2fd9e5a2407385216081c',1,'TEST_CASE(&quot;Test max_independent_net dwarf&quot;, &quot;[test_max_independent_net]&quot;):&#160;test_min_cover.cpp'],['../test__min__cover_8cpp.html#a05c317144ac7688afb67dabb457b9910',1,'TEST_CASE(&quot;Test contraction subgraph dwarf&quot;, &quot;[test_contractio_subgraph]&quot;):&#160;test_min_cover.cpp'],['../test__MLPartMgr_8cpp.html#ac16eadf142034f4b6298e5ef87a55e0a',1,'TEST_CASE(&quot;Test MLBiPartMgr dwarf&quot;, &quot;[test_MLBiPartMgr]&quot;):&#160;test_MLPartMgr.cpp'],['../test__MLPartMgr_8cpp.html#af6dc9fef6d279a9f0fba75be785fba09',1,'TEST_CASE(&quot;Test MLKWayPartMgr dwarf&quot;, &quot;[test_MLKWayPartMgr]&quot;):&#160;test_MLPartMgr.cpp'],['../test__MLPartMgr_8cpp.html#a24f21066901c62f92011eeb1e579ddba',1,'TEST_CASE(&quot;Test MLBiPartMgr p1&quot;, &quot;[test_MLBiPartMgr]&quot;):&#160;test_MLPartMgr.cpp'],['../test__MLPartMgr_8cpp.html#a6e3b92b0962f357081eeb76ca3b85c51',1,'TEST_CASE(&quot;Test MLBiPartMgr ibm01&quot;, &quot;[test_MLBiPartMgr]&quot;):&#160;test_MLPartMgr.cpp'],['../test__MLPartMgr_8cpp.html#a3ce5211bf6a150f16a1fddbaba61d87c',1,'TEST_CASE(&quot;Test MLBiPartMgr ibm03&quot;, &quot;[test_MLBiPartMgr]&quot;):&#160;test_MLPartMgr.cpp'],['../test__netlist_8cpp.html#a235c61a179ce18028d63481775d0eb7d',1,'TEST_CASE(&quot;Test Netlist&quot;, &quot;[test_netlist]&quot;):&#160;test_netlist.cpp'],['../test__netlist_8cpp.html#a27b71e18a8b6a03f3c481027ec503b43',1,'TEST_CASE(&quot;Test dwarf&quot;, &quot;[test_dwarf]&quot;):&#160;test_netlist.cpp'],['../home_2lubuntu_2github_2ckpttncpp_2lib_2test_2src_2test__range_8cpp.html#a577b9e8b6304120acee6ac258dbed47c',1,'TEST_CASE(&quot;Test Range&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../home_2lubuntu_2github_2ckpttncpp_2lib_2test_2src_2test__range_8cpp.html#a575a261006e89043e6ef5158f90ecd86',1,'TEST_CASE(&quot;Test Range2&quot;, &quot;[range]&quot;):&#160;test_range.cpp'],['../test__readwrite_8cpp.html#aa912e597fca177a562f23f136b3862c1',1,'TEST_CASE(&quot;Test Read Dwarf&quot;, &quot;[test_readwrite]&quot;):&#160;test_readwrite.cpp'],['../test__readwrite_8cpp.html#a2ed42892c92596d788cea69523180fc7',1,'TEST_CASE(&quot;Test Read p1&quot;, &quot;[test_readwrite]&quot;):&#160;test_readwrite.cpp'],['../test__readwrite_8cpp.html#addf60c50bd60794c03d3a9017201bed8',1,'TEST_CASE(&quot;Test Write Dwarf&quot;, &quot;[test_readwrite]&quot;):&#160;test_readwrite.cpp'],['../test__readwrite_8cpp.html#ab2b0b6036c00435b08ae351cc646cef6',1,'TEST_CASE(&quot;Test Write p1&quot;, &quot;[test_readwrite]&quot;):&#160;test_readwrite.cpp']]],
  ['test_5fchain_2ecpp',['test_chain.cpp',['../test__chain_8cpp.html',1,'']]],
  ['test_5fchunked_2ecpp',['test_chunked.cpp',['../test__chunked_8cpp.html',1,'']]],
  ['test_5fcombinations_2ecpp',['test_combinations.cpp',['../test__combinations_8cpp.html',1,'']]],
  ['test_5fcombinations_5fwith_5freplacement_2ecpp',['test_combinations_with_replacement.cpp',['../test__combinations__with__replacement_8cpp.html',1,'']]],
  ['test_5fcompress_2ecpp',['test_compress.cpp',['../test__compress_8cpp.html',1,'']]],
  ['test_5fcount_2ecpp',['test_count.cpp',['../test__count_8cpp.html',1,'']]],
  ['test_5fcycle_2ecpp',['test_cycle.cpp',['../test__cycle_8cpp.html',1,'']]],
  ['test_5fdllist_2ecpp',['test_dllist.cpp',['../test__dllist_8cpp.html',1,'']]],
  ['test_5fdropwhile_2ecpp',['test_dropwhile.cpp',['../test__dropwhile_8cpp.html',1,'']]],
  ['test_5fenumerate_2ecpp',['test_enumerate.cpp',['../test__enumerate_8cpp.html',1,'']]],
  ['test_5ffilter_2ecpp',['test_filter.cpp',['../test__filter_8cpp.html',1,'']]],
  ['test_5ffilterfalse_2ecpp',['test_filterfalse.cpp',['../test__filterfalse_8cpp.html',1,'']]],
  ['test_5ffmbigainmgr_2ecpp',['test_FMBiGainMgr.cpp',['../test__FMBiGainMgr_8cpp.html',1,'']]],
  ['test_5ffmbipartmgr_2ecpp',['test_FMBiPartMgr.cpp',['../test__FMBiPartMgr_8cpp.html',1,'']]],
  ['test_5ffmkwaypartmgr_2ecpp',['test_FMKWayPartMgr.cpp',['../test__FMKWayPartMgr_8cpp.html',1,'']]],
  ['test_5fgraph_2ecpp',['test_graph.cpp',['../test__graph_8cpp.html',1,'']]],
  ['test_5fgroupby_2ecpp',['test_groupby.cpp',['../test__groupby_8cpp.html',1,'']]],
  ['test_5fhelpers_2ecpp',['test_helpers.cpp',['../test__helpers_8cpp.html',1,'']]],
  ['test_5fimap_2ecpp',['test_imap.cpp',['../test__imap_8cpp.html',1,'']]],
  ['test_5fiterator_5fwrapper_2ecpp',['test_iterator_wrapper.cpp',['../test__iterator__wrapper_8cpp.html',1,'']]],
  ['test_5fiteratoriterator_2ecpp',['test_iteratoriterator.cpp',['../test__iteratoriterator_8cpp.html',1,'']]],
  ['test_5fiterbase_2ecpp',['test_iterbase.cpp',['../test__iterbase_8cpp.html',1,'']]],
  ['test_5fmain_2ecpp',['test_main.cpp',['../test__main_8cpp.html',1,'']]],
  ['test_5fmin_5fcover_2ecpp',['test_min_cover.cpp',['../test__min__cover_8cpp.html',1,'']]],
  ['test_5fmixed_2ecpp',['test_mixed.cpp',['../test__mixed_8cpp.html',1,'']]],
  ['test_5fmlpartmgr_2ecpp',['test_MLPartMgr.cpp',['../test__MLPartMgr_8cpp.html',1,'']]],
  ['test_5fnetlist_2ecpp',['test_netlist.cpp',['../test__netlist_8cpp.html',1,'']]],
  ['test_5fpermutations_2ecpp',['test_permutations.cpp',['../test__permutations_8cpp.html',1,'']]],
  ['test_5fpowerset_2ecpp',['test_powerset.cpp',['../test__powerset_8cpp.html',1,'']]],
  ['test_5fproduct_2ecpp',['test_product.cpp',['../test__product_8cpp.html',1,'']]],
  ['test_5frange_2ecpp',['test_range.cpp',['../media_2lubuntu_2USBDISK_2github_2ckpttncpp_2third__party_2cppitertools_2test_2test__range_8cpp.html',1,'(Global Namespace)'],['../home_2lubuntu_2github_2ckpttncpp_2lib_2test_2src_2test__range_8cpp.html',1,'(Global Namespace)']]],
  ['test_5freadwrite_2ecpp',['test_readwrite.cpp',['../test__readwrite_8cpp.html',1,'']]],
  ['test_5frepeat_2ecpp',['test_repeat.cpp',['../test__repeat_8cpp.html',1,'']]],
  ['test_5freversed_2ecpp',['test_reversed.cpp',['../test__reversed_8cpp.html',1,'']]],
  ['test_5fslice_2ecpp',['test_slice.cpp',['../test__slice_8cpp.html',1,'']]],
  ['test_5fsliding_5fwindow_2ecpp',['test_sliding_window.cpp',['../test__sliding__window_8cpp.html',1,'']]],
  ['test_5fsorted_2ecpp',['test_sorted.cpp',['../test__sorted_8cpp.html',1,'']]],
  ['test_5fstarmap_2ecpp',['test_starmap.cpp',['../test__starmap_8cpp.html',1,'']]],
  ['test_5ftakewhile_2ecpp',['test_takewhile.cpp',['../test__takewhile_8cpp.html',1,'']]],
  ['test_5funique_5feverseen_2ecpp',['test_unique_everseen.cpp',['../test__unique__everseen_8cpp.html',1,'']]],
  ['test_5funique_5fjustseen_2ecpp',['test_unique_justseen.cpp',['../test__unique__justseen_8cpp.html',1,'']]],
  ['test_5fzip_2ecpp',['test_zip.cpp',['../test__zip_8cpp.html',1,'']]],
  ['test_5fzip_5flongest_2ecpp',['test_zip_longest.cpp',['../test__zip__longest_8cpp.html',1,'']]],
  ['testcase',['testcase',['../compress__examples_8cpp.html#aec6c206729e1f7fdb2b33b77830a6ad4',1,'compress_examples.cpp']]],
  ['top_5flevel_5fend_5f',['top_level_end_',['../classiter_1_1impl_1_1ChainedFromIterable_1_1Iterator.html#a58d254a5525d5a54dd05cbcd264a9819',1,'iter::impl::ChainedFromIterable::Iterator']]],
  ['top_5flevel_5fiter_5f',['top_level_iter_',['../classiter_1_1impl_1_1ChainedFromIterable_1_1Iterator.html#a696fa596ea684613282056ec91d72c43',1,'iter::impl::ChainedFromIterable::Iterator']]],
  ['topart',['toPart',['../structMoveInfo.html#acc43e76ff233a269f5bca90673710bcc',1,'MoveInfo::toPart()'],['../structMoveInfoV.html#acf68e468e07a397392a82345da4c8a72',1,'MoveInfoV::toPart()']]],
  ['tostring',['toString',['../namespaceCatch.html#abfb51d286fea82030b3e396e16133778',1,'Catch']]],
  ['totalcost',['totalcost',['../classFMBiGainCalc.html#a5b80f9d3d9eefa43de013e6488eb28ce',1,'FMBiGainCalc::totalcost()'],['../classFMKWayGainCalc.html#a5bf33b8482c2563aad423fbb9d930191',1,'FMKWayGainCalc::totalcost()'],['../classMLPartMgr.html#a121bd50cfac806d2317278ac862c5fa4',1,'MLPartMgr::totalcost()'],['../classPartMgrBase.html#a3d2a862ac1329cd619831161ce73a360',1,'PartMgrBase::totalcost()']]],
  ['totalweight',['totalweight',['../classFMConstrMgr.html#aca29065085facd555e7b42e4ecae7c55',1,'FMConstrMgr']]],
  ['tplain',['TPlain',['../classiter_1_1impl_1_1ArrowProxy.html#a63bd8bbc042255bceae1b749ea66d7a5',1,'iter::impl::ArrowProxy::TPlain()'],['../classiter_1_1impl_1_1DerefHolder.html#a8249f09b1ecc1025268739a86a90f5a2',1,'iter::impl::DerefHolder::TPlain()'],['../classiter_1_1impl_1_1RepeaterWithCount.html#a5eaf88755bede12b9d6b150ee2b30015',1,'iter::impl::RepeaterWithCount::TPlain()'],['../classiter_1_1impl_1_1Repeater.html#a467842be8315c1a82fe465e7994e23de',1,'iter::impl::Repeater::TPlain()']]],
  ['traitsvalue',['TraitsValue',['../classiter_1_1impl_1_1Chained_1_1IteratorData.html#a94404912378d19ab221d2504b9c93aff',1,'iter::impl::Chained::IteratorData::TraitsValue()'],['../classiter_1_1impl_1_1TupleStarMapper_1_1IteratorData.html#af4852487cb3396d95eb311583e1b98e0',1,'iter::impl::TupleStarMapper::IteratorData::TraitsValue()']]],
  ['tup_5f',['tup_',['../classiter_1_1impl_1_1Chained.html#ad60af9361b10333f34a1c61bdefc97da',1,'iter::impl::Chained::tup_()'],['../classiter_1_1impl_1_1TupleStarMapper.html#af804b3ae0073de57b808bae51ba898f1',1,'iter::impl::TupleStarMapper::tup_()'],['../classiter_1_1impl_1_1TupleStarMapper_1_1Iterator.html#a0be728ca50c48aa2586b274af05211b5',1,'iter::impl::TupleStarMapper::Iterator::tup_()']]],
  ['tuple_5felement_3c_20n_2c_20iter_3a_3aimpl_3a_3aenumiteryield_3c_20index_2c_20elem_20_3e_20_3e',['tuple_element&lt; N, iter::impl::EnumIterYield&lt; Index, Elem &gt; &gt;',['../classstd_1_1tuple__element_3_01N_00_01iter_1_1impl_1_1EnumIterYield_3_01Index_00_01Elem_01_4_01_4.html',1,'std']]],
  ['tuple_5fsize_3c_20iter_3a_3aimpl_3a_3aenumiteryield_3c_20index_2c_20elem_20_3e_20_3e',['tuple_size&lt; iter::impl::EnumIterYield&lt; Index, Elem &gt; &gt;',['../classstd_1_1tuple__size_3_01iter_1_1impl_1_1EnumIterYield_3_01Index_00_01Elem_01_4_01_4.html',1,'std']]],
  ['tuplestarmapper',['TupleStarMapper',['../classiter_1_1impl_1_1TupleStarMapper.html',1,'iter::impl::TupleStarMapper&lt; Func, TupType, Is &gt;'],['../classiter_1_1impl_1_1TupleStarMapper.html#a9799a2b307a41295c907b83528e3d476',1,'iter::impl::TupleStarMapper::TupleStarMapper()']]],
  ['type',['type',['../structiter_1_1impl_1_1type__is.html#a4635b7150393ae97abe33ee26cc08563',1,'iter::impl::type_is::type()'],['../structiter_1_1impl_1_1detail_1_1ArrowHelper.html#acd65165852da4adc941df0944ae5bd2d',1,'iter::impl::detail::ArrowHelper::type()'],['../structiter_1_1impl_1_1detail_1_1ArrowHelper_3_01T_01_5_00_01void_01_4.html#af38132f49a88901e41c33db74dfd2a9a',1,'iter::impl::detail::ArrowHelper&lt; T *, void &gt;::type()'],['../structiter_1_1impl_1_1detail_1_1ArrowHelper_3_01T_00_01std_1_1void__t_3_01decltype_07std_1_1declaa4f9c80f63cf1c2e308888681a1098d.html#a7c613276fe6beec8907486edf149a073',1,'iter::impl::detail::declval&lt; T &amp; &gt;().operator-&gt;())&gt; &gt;::type()']]],
  ['type_5fis',['type_is',['../structiter_1_1impl_1_1type__is.html',1,'iter::impl']]],
  ['type_5fis_3c_20decltype_28_2astd_3a_3adeclval_3c_20const_20u_20_26_3e_28_29_2eat_280_29_29_3e',['type_is&lt; decltype(*std::declval&lt; const U &amp;&gt;().at(0))&gt;',['../structiter_1_1impl_1_1type__is.html',1,'iter::impl']]],
  ['type_5fis_3c_20decltype_28_2astd_3a_3adeclval_3c_20const_20u_20_26_3e_28_29_5b0_5d_29_3e',['type_is&lt; decltype(*std::declval&lt; const U &amp;&gt;()[0])&gt;',['../structiter_1_1impl_1_1type__is.html',1,'iter::impl']]],
  ['type_5fis_3c_20iterator_5ftype_3c_20container_20_3e_20_3e',['type_is&lt; iterator_type&lt; Container &gt; &gt;',['../structiter_1_1impl_1_1type__is.html',1,'iter::impl']]],
  ['type_5fis_3c_20iteratorwrapperimpl_3c_20iterator_5ftype_3c_20container_20_3e_2c_20iterator_5fend_5ftype_3c_20container_20_3e_20_3e_20_3e',['type_is&lt; IteratorWrapperImpl&lt; iterator_type&lt; Container &gt;, iterator_end_type&lt; Container &gt; &gt; &gt;',['../structiter_1_1impl_1_1type__is.html',1,'iter::impl']]],
  ['type_5fis_3c_20iteratorwrapperimpl_3c_20reverse_5fiterator_5ftype_3c_20container_20_3e_2c_20reverse_5fiterator_5fend_5ftype_3c_20container_20_3e_20_3e_20_3e',['type_is&lt; IteratorWrapperImpl&lt; reverse_iterator_type&lt; Container &gt;, reverse_iterator_end_type&lt; Container &gt; &gt; &gt;',['../structiter_1_1impl_1_1type__is.html',1,'iter::impl']]],
  ['type_5fis_3c_20reverse_5fiterator_5ftype_3c_20container_20_3e_20_3e',['type_is&lt; reverse_iterator_type&lt; Container &gt; &gt;',['../structiter_1_1impl_1_1type__is.html',1,'iter::impl']]],
  ['type_5fis_3c_20void_20_3e',['type_is&lt; void &gt;',['../structiter_1_1impl_1_1type__is.html',1,'iter::impl']]]
];
